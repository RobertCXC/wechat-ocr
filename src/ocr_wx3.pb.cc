// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_wx3.proto

#include "ocr_wx3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wx3 {
PROTOBUF_CONSTEXPR OcrInputBuffer::OcrInputBuffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pic_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pic_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.u2_)*/0u
  , /*decltype(_impl_.u3_)*/0u} {}
struct OcrInputBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrInputBufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrInputBufferDefaultTypeInternal() {}
  union {
    OcrInputBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrInputBufferDefaultTypeInternal _OcrInputBuffer_default_instance_;
PROTOBUF_CONSTEXPR OcrOutputBuffer::OcrOutputBuffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.unk4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.img_width_)*/0u
  , /*decltype(_impl_.img_height_)*/0u} {}
struct OcrOutputBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrOutputBufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrOutputBufferDefaultTypeInternal() {}
  union {
    OcrOutputBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrOutputBufferDefaultTypeInternal _OcrOutputBuffer_default_instance_;
PROTOBUF_CONSTEXPR OcrRespond::OcrRespond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ocr_result_)*/nullptr
  , /*decltype(_impl_.task_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.err_code_)*/0} {}
struct OcrRespondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRespondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRespondDefaultTypeInternal() {}
  union {
    OcrRespond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRespondDefaultTypeInternal _OcrRespond_default_instance_;
PROTOBUF_CONSTEXPR OcrRequest::OcrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.task_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OcrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRequestDefaultTypeInternal() {}
  union {
    OcrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
}  // namespace wx3
namespace wx3 {

// ===================================================================

class OcrInputBuffer::_Internal {
 public:
  using HasBits = decltype(std::declval<OcrInputBuffer>()._impl_._has_bits_);
  static void set_has_pic_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_u2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_u3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pic_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OcrInputBuffer::OcrInputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx3.OcrInputBuffer)
}
OcrInputBuffer::OcrInputBuffer(const OcrInputBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrInputBuffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pic_path_){}
    , decltype(_impl_.pic_data_){}
    , decltype(_impl_.u2_){}
    , decltype(_impl_.u3_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.pic_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pic_path()) {
    _this->_impl_.pic_path_.Set(from._internal_pic_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pic_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pic_data()) {
    _this->_impl_.pic_data_.Set(from._internal_pic_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.u2_, &from._impl_.u2_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.u3_) -
    reinterpret_cast<char*>(&_impl_.u2_)) + sizeof(_impl_.u3_));
  // @@protoc_insertion_point(copy_constructor:wx3.OcrInputBuffer)
}

inline void OcrInputBuffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pic_path_){}
    , decltype(_impl_.pic_data_){}
    , decltype(_impl_.u2_){0u}
    , decltype(_impl_.u3_){0u}
  };
  _impl_.pic_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pic_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OcrInputBuffer::~OcrInputBuffer() {
  // @@protoc_insertion_point(destructor:wx3.OcrInputBuffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrInputBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pic_path_.Destroy();
  _impl_.pic_data_.Destroy();
}

void OcrInputBuffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrInputBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:wx3.OcrInputBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pic_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pic_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.u2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.u3_) -
        reinterpret_cast<char*>(&_impl_.u2_)) + sizeof(_impl_.u3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OcrInputBuffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pic_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pic_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 u2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_u2(&has_bits);
          _impl_.u2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 u3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_u3(&has_bits);
          _impl_.u3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes pic_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pic_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrInputBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx3.OcrInputBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string pic_path = 1;
  if (_internal_has_pic_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pic_path().data(), static_cast<int>(this->_internal_pic_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wx3.OcrInputBuffer.pic_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pic_path(), target);
  }

  // optional uint32 u2 = 2;
  if (_internal_has_u2()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_u2(), target);
  }

  // optional uint32 u3 = 3;
  if (_internal_has_u3()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_u3(), target);
  }

  // optional bytes pic_data = 4;
  if (_internal_has_pic_data()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pic_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx3.OcrInputBuffer)
  return target;
}

size_t OcrInputBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx3.OcrInputBuffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string pic_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pic_path());
    }

    // optional bytes pic_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pic_data());
    }

    // optional uint32 u2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_u2());
    }

    // optional uint32 u3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_u3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrInputBuffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrInputBuffer*>(
      &from));
}

void OcrInputBuffer::MergeFrom(const OcrInputBuffer& from) {
  OcrInputBuffer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx3.OcrInputBuffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pic_path(from._internal_pic_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pic_data(from._internal_pic_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.u2_ = from._impl_.u2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.u3_ = from._impl_.u3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrInputBuffer::CopyFrom(const OcrInputBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx3.OcrInputBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrInputBuffer::IsInitialized() const {
  return true;
}

void OcrInputBuffer::InternalSwap(OcrInputBuffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pic_path_, lhs_arena,
      &other->_impl_.pic_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pic_data_, lhs_arena,
      &other->_impl_.pic_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrInputBuffer, _impl_.u3_)
      + sizeof(OcrInputBuffer::_impl_.u3_)
      - PROTOBUF_FIELD_OFFSET(OcrInputBuffer, _impl_.u2_)>(
          reinterpret_cast<char*>(&_impl_.u2_),
          reinterpret_cast<char*>(&other->_impl_.u2_));
}

std::string OcrInputBuffer::GetTypeName() const {
  return "wx3.OcrInputBuffer";
}


// ===================================================================

class OcrOutputBuffer::_Internal {
 public:
  using HasBits = decltype(std::declval<OcrOutputBuffer>()._impl_._has_bits_);
  static void set_has_img_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_img_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unk4(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void OcrOutputBuffer::clear_lines() {
  _impl_.lines_.Clear();
}
OcrOutputBuffer::OcrOutputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx3.OcrOutputBuffer)
}
OcrOutputBuffer::OcrOutputBuffer(const OcrOutputBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrOutputBuffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.unk4_){}
    , decltype(_impl_.img_width_){}
    , decltype(_impl_.img_height_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.unk4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unk4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unk4()) {
    _this->_impl_.unk4_.Set(from._internal_unk4(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.img_width_, &from._impl_.img_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.img_height_) -
    reinterpret_cast<char*>(&_impl_.img_width_)) + sizeof(_impl_.img_height_));
  // @@protoc_insertion_point(copy_constructor:wx3.OcrOutputBuffer)
}

inline void OcrOutputBuffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.unk4_){}
    , decltype(_impl_.img_width_){0u}
    , decltype(_impl_.img_height_){0u}
  };
  _impl_.unk4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unk4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OcrOutputBuffer::~OcrOutputBuffer() {
  // @@protoc_insertion_point(destructor:wx3.OcrOutputBuffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrOutputBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.unk4_.Destroy();
}

void OcrOutputBuffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrOutputBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:wx3.OcrOutputBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.unk4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.img_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.img_height_) -
        reinterpret_cast<char*>(&_impl_.img_width_)) + sizeof(_impl_.img_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OcrOutputBuffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_common.OCRResultLine lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_img_width(&has_bits);
          _impl_.img_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_img_height(&has_bits);
          _impl_.img_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unk4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_unk4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrOutputBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx3.OcrOutputBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_common.OCRResultLine lines = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 img_width = 2;
  if (_internal_has_img_width()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_img_width(), target);
  }

  // optional uint32 img_height = 3;
  if (_internal_has_img_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_img_height(), target);
  }

  // optional string unk4 = 4;
  if (_internal_has_unk4()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unk4().data(), static_cast<int>(this->_internal_unk4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wx3.OcrOutputBuffer.unk4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_unk4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx3.OcrOutputBuffer)
  return target;
}

size_t OcrOutputBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx3.OcrOutputBuffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_common.OCRResultLine lines = 1;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string unk4 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unk4());
    }

    // optional uint32 img_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_width());
    }

    // optional uint32 img_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrOutputBuffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrOutputBuffer*>(
      &from));
}

void OcrOutputBuffer::MergeFrom(const OcrOutputBuffer& from) {
  OcrOutputBuffer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx3.OcrOutputBuffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unk4(from._internal_unk4());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.img_width_ = from._impl_.img_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.img_height_ = from._impl_.img_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrOutputBuffer::CopyFrom(const OcrOutputBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx3.OcrOutputBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrOutputBuffer::IsInitialized() const {
  return true;
}

void OcrOutputBuffer::InternalSwap(OcrOutputBuffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unk4_, lhs_arena,
      &other->_impl_.unk4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrOutputBuffer, _impl_.img_height_)
      + sizeof(OcrOutputBuffer::_impl_.img_height_)
      - PROTOBUF_FIELD_OFFSET(OcrOutputBuffer, _impl_.img_width_)>(
          reinterpret_cast<char*>(&_impl_.img_width_),
          reinterpret_cast<char*>(&other->_impl_.img_width_));
}

std::string OcrOutputBuffer::GetTypeName() const {
  return "wx3.OcrOutputBuffer";
}


// ===================================================================

class OcrRespond::_Internal {
 public:
  using HasBits = decltype(std::declval<OcrRespond>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_err_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::wx3::OcrOutputBuffer& ocr_result(const OcrRespond* msg);
  static void set_has_ocr_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wx3::OcrOutputBuffer&
OcrRespond::_Internal::ocr_result(const OcrRespond* msg) {
  return *msg->_impl_.ocr_result_;
}
OcrRespond::OcrRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx3.OcrRespond)
}
OcrRespond::OcrRespond(const OcrRespond& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrRespond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ocr_result_){nullptr}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.err_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_ocr_result()) {
    _this->_impl_.ocr_result_ = new ::wx3::OcrOutputBuffer(*from._impl_.ocr_result_);
  }
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_code_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.err_code_));
  // @@protoc_insertion_point(copy_constructor:wx3.OcrRespond)
}

inline void OcrRespond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ocr_result_){nullptr}
    , decltype(_impl_.task_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.err_code_){0}
  };
}

OcrRespond::~OcrRespond() {
  // @@protoc_insertion_point(destructor:wx3.OcrRespond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRespond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ocr_result_;
}

void OcrRespond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:wx3.OcrRespond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ocr_result_ != nullptr);
    _impl_.ocr_result_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.err_code_) -
        reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.err_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OcrRespond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_err_code(&has_bits);
          _impl_.err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wx3.OcrOutputBuffer ocr_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocr_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRespond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx3.OcrRespond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 task_id = 2;
  if (_internal_has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_task_id(), target);
  }

  // optional int32 err_code = 3;
  if (_internal_has_err_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // optional .wx3.OcrOutputBuffer ocr_result = 4;
  if (_internal_has_ocr_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ocr_result(this),
        _Internal::ocr_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx3.OcrRespond)
  return target;
}

size_t OcrRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx3.OcrRespond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .wx3.OcrOutputBuffer ocr_result = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ocr_result_);
    }

    // optional uint64 task_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_task_id());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 err_code = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRespond::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrRespond*>(
      &from));
}

void OcrRespond::MergeFrom(const OcrRespond& from) {
  OcrRespond* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx3.OcrRespond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ocr_result()->::wx3::OcrOutputBuffer::MergeFrom(
          from._internal_ocr_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.err_code_ = from._impl_.err_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrRespond::CopyFrom(const OcrRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx3.OcrRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRespond::IsInitialized() const {
  return true;
}

void OcrRespond::InternalSwap(OcrRespond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrRespond, _impl_.err_code_)
      + sizeof(OcrRespond::_impl_.err_code_)
      - PROTOBUF_FIELD_OFFSET(OcrRespond, _impl_.ocr_result_)>(
          reinterpret_cast<char*>(&_impl_.ocr_result_),
          reinterpret_cast<char*>(&other->_impl_.ocr_result_));
}

std::string OcrRespond::GetTypeName() const {
  return "wx3.OcrRespond";
}


// ===================================================================

class OcrRequest::_Internal {
 public:
  static const ::wx3::OcrInputBuffer& input(const OcrRequest* msg);
};

const ::wx3::OcrInputBuffer&
OcrRequest::_Internal::input(const OcrRequest* msg) {
  return *msg->_impl_.input_;
}
OcrRequest::OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx3.OcrRequest)
}
OcrRequest::OcrRequest(const OcrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OcrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::wx3::OcrInputBuffer(*from._impl_.input_);
  }
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:wx3.OcrRequest)
}

inline void OcrRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.task_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OcrRequest::~OcrRequest() {
  // @@protoc_insertion_point(destructor:wx3.OcrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
}

void OcrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OcrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wx3.OcrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

const char* OcrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wx3.OcrInputBuffer input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx3.OcrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // uint64 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_task_id(), target);
  }

  // .wx3.OcrInputBuffer input = 3;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx3.OcrRequest)
  return target;
}

size_t OcrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx3.OcrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wx3.OcrInputBuffer input = 3;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // uint64 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_task_id());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OcrRequest*>(
      &from));
}

void OcrRequest::MergeFrom(const OcrRequest& from) {
  OcrRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx3.OcrRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::wx3::OcrInputBuffer::MergeFrom(
        from._internal_input());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OcrRequest::CopyFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx3.OcrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest::IsInitialized() const {
  return true;
}

void OcrRequest::InternalSwap(OcrRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrRequest, _impl_.type_)
      + sizeof(OcrRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(OcrRequest, _impl_.input_)>(
          reinterpret_cast<char*>(&_impl_.input_),
          reinterpret_cast<char*>(&other->_impl_.input_));
}

std::string OcrRequest::GetTypeName() const {
  return "wx3.OcrRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wx3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wx3::OcrInputBuffer*
Arena::CreateMaybeMessage< ::wx3::OcrInputBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx3::OcrInputBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::wx3::OcrOutputBuffer*
Arena::CreateMaybeMessage< ::wx3::OcrOutputBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx3::OcrOutputBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::wx3::OcrRespond*
Arena::CreateMaybeMessage< ::wx3::OcrRespond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx3::OcrRespond >(arena);
}
template<> PROTOBUF_NOINLINE ::wx3::OcrRequest*
Arena::CreateMaybeMessage< ::wx3::OcrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx3::OcrRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
