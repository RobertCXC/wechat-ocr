// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_wx3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ocr_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ocr_5fwx3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ocr_5fwx3_2eproto {
  static const uint32_t offsets[];
};
namespace wx3 {
class OcrInputBuffer;
struct OcrInputBufferDefaultTypeInternal;
extern OcrInputBufferDefaultTypeInternal _OcrInputBuffer_default_instance_;
class OcrOutputBuffer;
struct OcrOutputBufferDefaultTypeInternal;
extern OcrOutputBufferDefaultTypeInternal _OcrOutputBuffer_default_instance_;
class OcrRequest;
struct OcrRequestDefaultTypeInternal;
extern OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
class OcrRespond;
struct OcrRespondDefaultTypeInternal;
extern OcrRespondDefaultTypeInternal _OcrRespond_default_instance_;
}  // namespace wx3
PROTOBUF_NAMESPACE_OPEN
template<> ::wx3::OcrInputBuffer* Arena::CreateMaybeMessage<::wx3::OcrInputBuffer>(Arena*);
template<> ::wx3::OcrOutputBuffer* Arena::CreateMaybeMessage<::wx3::OcrOutputBuffer>(Arena*);
template<> ::wx3::OcrRequest* Arena::CreateMaybeMessage<::wx3::OcrRequest>(Arena*);
template<> ::wx3::OcrRespond* Arena::CreateMaybeMessage<::wx3::OcrRespond>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wx3 {

// ===================================================================

class OcrInputBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx3.OcrInputBuffer) */ {
 public:
  inline OcrInputBuffer() : OcrInputBuffer(nullptr) {}
  ~OcrInputBuffer() override;
  explicit PROTOBUF_CONSTEXPR OcrInputBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrInputBuffer(const OcrInputBuffer& from);
  OcrInputBuffer(OcrInputBuffer&& from) noexcept
    : OcrInputBuffer() {
    *this = ::std::move(from);
  }

  inline OcrInputBuffer& operator=(const OcrInputBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrInputBuffer& operator=(OcrInputBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrInputBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrInputBuffer* internal_default_instance() {
    return reinterpret_cast<const OcrInputBuffer*>(
               &_OcrInputBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OcrInputBuffer& a, OcrInputBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrInputBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrInputBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrInputBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrInputBuffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrInputBuffer& from);
  void MergeFrom(const OcrInputBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrInputBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx3.OcrInputBuffer";
  }
  protected:
  explicit OcrInputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicPathFieldNumber = 1,
    kPicDataFieldNumber = 4,
    kU2FieldNumber = 2,
    kU3FieldNumber = 3,
  };
  // optional string pic_path = 1;
  bool has_pic_path() const;
  private:
  bool _internal_has_pic_path() const;
  public:
  void clear_pic_path();
  const std::string& pic_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_path();
  PROTOBUF_NODISCARD std::string* release_pic_path();
  void set_allocated_pic_path(std::string* pic_path);
  private:
  const std::string& _internal_pic_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_path(const std::string& value);
  std::string* _internal_mutable_pic_path();
  public:

  // optional bytes pic_data = 4;
  bool has_pic_data() const;
  private:
  bool _internal_has_pic_data() const;
  public:
  void clear_pic_data();
  const std::string& pic_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_data();
  PROTOBUF_NODISCARD std::string* release_pic_data();
  void set_allocated_pic_data(std::string* pic_data);
  private:
  const std::string& _internal_pic_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_data(const std::string& value);
  std::string* _internal_mutable_pic_data();
  public:

  // optional uint32 u2 = 2;
  bool has_u2() const;
  private:
  bool _internal_has_u2() const;
  public:
  void clear_u2();
  uint32_t u2() const;
  void set_u2(uint32_t value);
  private:
  uint32_t _internal_u2() const;
  void _internal_set_u2(uint32_t value);
  public:

  // optional uint32 u3 = 3;
  bool has_u3() const;
  private:
  bool _internal_has_u3() const;
  public:
  void clear_u3();
  uint32_t u3() const;
  void set_u3(uint32_t value);
  private:
  uint32_t _internal_u3() const;
  void _internal_set_u3(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx3.OcrInputBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_data_;
    uint32_t u2_;
    uint32_t u3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx3_2eproto;
};
// -------------------------------------------------------------------

class OcrOutputBuffer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx3.OcrOutputBuffer) */ {
 public:
  inline OcrOutputBuffer() : OcrOutputBuffer(nullptr) {}
  ~OcrOutputBuffer() override;
  explicit PROTOBUF_CONSTEXPR OcrOutputBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrOutputBuffer(const OcrOutputBuffer& from);
  OcrOutputBuffer(OcrOutputBuffer&& from) noexcept
    : OcrOutputBuffer() {
    *this = ::std::move(from);
  }

  inline OcrOutputBuffer& operator=(const OcrOutputBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrOutputBuffer& operator=(OcrOutputBuffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrOutputBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrOutputBuffer* internal_default_instance() {
    return reinterpret_cast<const OcrOutputBuffer*>(
               &_OcrOutputBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OcrOutputBuffer& a, OcrOutputBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrOutputBuffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrOutputBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrOutputBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrOutputBuffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrOutputBuffer& from);
  void MergeFrom(const OcrOutputBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrOutputBuffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx3.OcrOutputBuffer";
  }
  protected:
  explicit OcrOutputBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
    kUnk4FieldNumber = 4,
    kImgWidthFieldNumber = 2,
    kImgHeightFieldNumber = 3,
  };
  // repeated .ocr_common.OCRResultLine lines = 1;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::ocr_common::OCRResultLine* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >*
      mutable_lines();
  private:
  const ::ocr_common::OCRResultLine& _internal_lines(int index) const;
  ::ocr_common::OCRResultLine* _internal_add_lines();
  public:
  const ::ocr_common::OCRResultLine& lines(int index) const;
  ::ocr_common::OCRResultLine* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >&
      lines() const;

  // optional string unk4 = 4;
  bool has_unk4() const;
  private:
  bool _internal_has_unk4() const;
  public:
  void clear_unk4();
  const std::string& unk4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unk4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unk4();
  PROTOBUF_NODISCARD std::string* release_unk4();
  void set_allocated_unk4(std::string* unk4);
  private:
  const std::string& _internal_unk4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk4(const std::string& value);
  std::string* _internal_mutable_unk4();
  public:

  // optional uint32 img_width = 2;
  bool has_img_width() const;
  private:
  bool _internal_has_img_width() const;
  public:
  void clear_img_width();
  uint32_t img_width() const;
  void set_img_width(uint32_t value);
  private:
  uint32_t _internal_img_width() const;
  void _internal_set_img_width(uint32_t value);
  public:

  // optional uint32 img_height = 3;
  bool has_img_height() const;
  private:
  bool _internal_has_img_height() const;
  public:
  void clear_img_height();
  uint32_t img_height() const;
  void set_img_height(uint32_t value);
  private:
  uint32_t _internal_img_height() const;
  void _internal_set_img_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx3.OcrOutputBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine > lines_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unk4_;
    uint32_t img_width_;
    uint32_t img_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx3_2eproto;
};
// -------------------------------------------------------------------

class OcrRespond final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx3.OcrRespond) */ {
 public:
  inline OcrRespond() : OcrRespond(nullptr) {}
  ~OcrRespond() override;
  explicit PROTOBUF_CONSTEXPR OcrRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRespond(const OcrRespond& from);
  OcrRespond(OcrRespond&& from) noexcept
    : OcrRespond() {
    *this = ::std::move(from);
  }

  inline OcrRespond& operator=(const OcrRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRespond& operator=(OcrRespond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRespond* internal_default_instance() {
    return reinterpret_cast<const OcrRespond*>(
               &_OcrRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OcrRespond& a, OcrRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRespond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRespond>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRespond& from);
  void MergeFrom(const OcrRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRespond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx3.OcrRespond";
  }
  protected:
  explicit OcrRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOcrResultFieldNumber = 4,
    kTaskIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kErrCodeFieldNumber = 3,
  };
  // optional .wx3.OcrOutputBuffer ocr_result = 4;
  bool has_ocr_result() const;
  private:
  bool _internal_has_ocr_result() const;
  public:
  void clear_ocr_result();
  const ::wx3::OcrOutputBuffer& ocr_result() const;
  PROTOBUF_NODISCARD ::wx3::OcrOutputBuffer* release_ocr_result();
  ::wx3::OcrOutputBuffer* mutable_ocr_result();
  void set_allocated_ocr_result(::wx3::OcrOutputBuffer* ocr_result);
  private:
  const ::wx3::OcrOutputBuffer& _internal_ocr_result() const;
  ::wx3::OcrOutputBuffer* _internal_mutable_ocr_result();
  public:
  void unsafe_arena_set_allocated_ocr_result(
      ::wx3::OcrOutputBuffer* ocr_result);
  ::wx3::OcrOutputBuffer* unsafe_arena_release_ocr_result();

  // optional uint64 task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional int32 err_code = 3;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx3.OcrRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::wx3::OcrOutputBuffer* ocr_result_;
    uint64_t task_id_;
    int32_t type_;
    int32_t err_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx3_2eproto;
};
// -------------------------------------------------------------------

class OcrRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx3.OcrRequest) */ {
 public:
  inline OcrRequest() : OcrRequest(nullptr) {}
  ~OcrRequest() override;
  explicit PROTOBUF_CONSTEXPR OcrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcrRequest(const OcrRequest& from);
  OcrRequest(OcrRequest&& from) noexcept
    : OcrRequest() {
    *this = ::std::move(from);
  }

  inline OcrRequest& operator=(const OcrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcrRequest& operator=(OcrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OcrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcrRequest* internal_default_instance() {
    return reinterpret_cast<const OcrRequest*>(
               &_OcrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OcrRequest& a, OcrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OcrRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcrRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OcrRequest& from);
  void MergeFrom(const OcrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OcrRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx3.OcrRequest";
  }
  protected:
  explicit OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 3,
    kTaskIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .wx3.OcrInputBuffer input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::wx3::OcrInputBuffer& input() const;
  PROTOBUF_NODISCARD ::wx3::OcrInputBuffer* release_input();
  ::wx3::OcrInputBuffer* mutable_input();
  void set_allocated_input(::wx3::OcrInputBuffer* input);
  private:
  const ::wx3::OcrInputBuffer& _internal_input() const;
  ::wx3::OcrInputBuffer* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::wx3::OcrInputBuffer* input);
  ::wx3::OcrInputBuffer* unsafe_arena_release_input();

  // uint64 task_id = 2;
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx3.OcrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wx3::OcrInputBuffer* input_;
    uint64_t task_id_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OcrInputBuffer

// optional string pic_path = 1;
inline bool OcrInputBuffer::_internal_has_pic_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrInputBuffer::has_pic_path() const {
  return _internal_has_pic_path();
}
inline void OcrInputBuffer::clear_pic_path() {
  _impl_.pic_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OcrInputBuffer::pic_path() const {
  // @@protoc_insertion_point(field_get:wx3.OcrInputBuffer.pic_path)
  return _internal_pic_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrInputBuffer::set_pic_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pic_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx3.OcrInputBuffer.pic_path)
}
inline std::string* OcrInputBuffer::mutable_pic_path() {
  std::string* _s = _internal_mutable_pic_path();
  // @@protoc_insertion_point(field_mutable:wx3.OcrInputBuffer.pic_path)
  return _s;
}
inline const std::string& OcrInputBuffer::_internal_pic_path() const {
  return _impl_.pic_path_.Get();
}
inline void OcrInputBuffer::_internal_set_pic_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pic_path_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrInputBuffer::_internal_mutable_pic_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pic_path_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrInputBuffer::release_pic_path() {
  // @@protoc_insertion_point(field_release:wx3.OcrInputBuffer.pic_path)
  if (!_internal_has_pic_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pic_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrInputBuffer::set_allocated_pic_path(std::string* pic_path) {
  if (pic_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pic_path_.SetAllocated(pic_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx3.OcrInputBuffer.pic_path)
}

// optional uint32 u2 = 2;
inline bool OcrInputBuffer::_internal_has_u2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrInputBuffer::has_u2() const {
  return _internal_has_u2();
}
inline void OcrInputBuffer::clear_u2() {
  _impl_.u2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t OcrInputBuffer::_internal_u2() const {
  return _impl_.u2_;
}
inline uint32_t OcrInputBuffer::u2() const {
  // @@protoc_insertion_point(field_get:wx3.OcrInputBuffer.u2)
  return _internal_u2();
}
inline void OcrInputBuffer::_internal_set_u2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.u2_ = value;
}
inline void OcrInputBuffer::set_u2(uint32_t value) {
  _internal_set_u2(value);
  // @@protoc_insertion_point(field_set:wx3.OcrInputBuffer.u2)
}

// optional uint32 u3 = 3;
inline bool OcrInputBuffer::_internal_has_u3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OcrInputBuffer::has_u3() const {
  return _internal_has_u3();
}
inline void OcrInputBuffer::clear_u3() {
  _impl_.u3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t OcrInputBuffer::_internal_u3() const {
  return _impl_.u3_;
}
inline uint32_t OcrInputBuffer::u3() const {
  // @@protoc_insertion_point(field_get:wx3.OcrInputBuffer.u3)
  return _internal_u3();
}
inline void OcrInputBuffer::_internal_set_u3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.u3_ = value;
}
inline void OcrInputBuffer::set_u3(uint32_t value) {
  _internal_set_u3(value);
  // @@protoc_insertion_point(field_set:wx3.OcrInputBuffer.u3)
}

// optional bytes pic_data = 4;
inline bool OcrInputBuffer::_internal_has_pic_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrInputBuffer::has_pic_data() const {
  return _internal_has_pic_data();
}
inline void OcrInputBuffer::clear_pic_data() {
  _impl_.pic_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OcrInputBuffer::pic_data() const {
  // @@protoc_insertion_point(field_get:wx3.OcrInputBuffer.pic_data)
  return _internal_pic_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrInputBuffer::set_pic_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pic_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx3.OcrInputBuffer.pic_data)
}
inline std::string* OcrInputBuffer::mutable_pic_data() {
  std::string* _s = _internal_mutable_pic_data();
  // @@protoc_insertion_point(field_mutable:wx3.OcrInputBuffer.pic_data)
  return _s;
}
inline const std::string& OcrInputBuffer::_internal_pic_data() const {
  return _impl_.pic_data_.Get();
}
inline void OcrInputBuffer::_internal_set_pic_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pic_data_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrInputBuffer::_internal_mutable_pic_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pic_data_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrInputBuffer::release_pic_data() {
  // @@protoc_insertion_point(field_release:wx3.OcrInputBuffer.pic_data)
  if (!_internal_has_pic_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pic_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrInputBuffer::set_allocated_pic_data(std::string* pic_data) {
  if (pic_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pic_data_.SetAllocated(pic_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx3.OcrInputBuffer.pic_data)
}

// -------------------------------------------------------------------

// OcrOutputBuffer

// repeated .ocr_common.OCRResultLine lines = 1;
inline int OcrOutputBuffer::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int OcrOutputBuffer::lines_size() const {
  return _internal_lines_size();
}
inline ::ocr_common::OCRResultLine* OcrOutputBuffer::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:wx3.OcrOutputBuffer.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >*
OcrOutputBuffer::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:wx3.OcrOutputBuffer.lines)
  return &_impl_.lines_;
}
inline const ::ocr_common::OCRResultLine& OcrOutputBuffer::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::ocr_common::OCRResultLine& OcrOutputBuffer::lines(int index) const {
  // @@protoc_insertion_point(field_get:wx3.OcrOutputBuffer.lines)
  return _internal_lines(index);
}
inline ::ocr_common::OCRResultLine* OcrOutputBuffer::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::ocr_common::OCRResultLine* OcrOutputBuffer::add_lines() {
  ::ocr_common::OCRResultLine* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:wx3.OcrOutputBuffer.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >&
OcrOutputBuffer::lines() const {
  // @@protoc_insertion_point(field_list:wx3.OcrOutputBuffer.lines)
  return _impl_.lines_;
}

// optional uint32 img_width = 2;
inline bool OcrOutputBuffer::_internal_has_img_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrOutputBuffer::has_img_width() const {
  return _internal_has_img_width();
}
inline void OcrOutputBuffer::clear_img_width() {
  _impl_.img_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t OcrOutputBuffer::_internal_img_width() const {
  return _impl_.img_width_;
}
inline uint32_t OcrOutputBuffer::img_width() const {
  // @@protoc_insertion_point(field_get:wx3.OcrOutputBuffer.img_width)
  return _internal_img_width();
}
inline void OcrOutputBuffer::_internal_set_img_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.img_width_ = value;
}
inline void OcrOutputBuffer::set_img_width(uint32_t value) {
  _internal_set_img_width(value);
  // @@protoc_insertion_point(field_set:wx3.OcrOutputBuffer.img_width)
}

// optional uint32 img_height = 3;
inline bool OcrOutputBuffer::_internal_has_img_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrOutputBuffer::has_img_height() const {
  return _internal_has_img_height();
}
inline void OcrOutputBuffer::clear_img_height() {
  _impl_.img_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t OcrOutputBuffer::_internal_img_height() const {
  return _impl_.img_height_;
}
inline uint32_t OcrOutputBuffer::img_height() const {
  // @@protoc_insertion_point(field_get:wx3.OcrOutputBuffer.img_height)
  return _internal_img_height();
}
inline void OcrOutputBuffer::_internal_set_img_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.img_height_ = value;
}
inline void OcrOutputBuffer::set_img_height(uint32_t value) {
  _internal_set_img_height(value);
  // @@protoc_insertion_point(field_set:wx3.OcrOutputBuffer.img_height)
}

// optional string unk4 = 4;
inline bool OcrOutputBuffer::_internal_has_unk4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OcrOutputBuffer::has_unk4() const {
  return _internal_has_unk4();
}
inline void OcrOutputBuffer::clear_unk4() {
  _impl_.unk4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OcrOutputBuffer::unk4() const {
  // @@protoc_insertion_point(field_get:wx3.OcrOutputBuffer.unk4)
  return _internal_unk4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcrOutputBuffer::set_unk4(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.unk4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx3.OcrOutputBuffer.unk4)
}
inline std::string* OcrOutputBuffer::mutable_unk4() {
  std::string* _s = _internal_mutable_unk4();
  // @@protoc_insertion_point(field_mutable:wx3.OcrOutputBuffer.unk4)
  return _s;
}
inline const std::string& OcrOutputBuffer::_internal_unk4() const {
  return _impl_.unk4_.Get();
}
inline void OcrOutputBuffer::_internal_set_unk4(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unk4_.Set(value, GetArenaForAllocation());
}
inline std::string* OcrOutputBuffer::_internal_mutable_unk4() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unk4_.Mutable(GetArenaForAllocation());
}
inline std::string* OcrOutputBuffer::release_unk4() {
  // @@protoc_insertion_point(field_release:wx3.OcrOutputBuffer.unk4)
  if (!_internal_has_unk4()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.unk4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unk4_.IsDefault()) {
    _impl_.unk4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OcrOutputBuffer::set_allocated_unk4(std::string* unk4) {
  if (unk4 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unk4_.SetAllocated(unk4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unk4_.IsDefault()) {
    _impl_.unk4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx3.OcrOutputBuffer.unk4)
}

// -------------------------------------------------------------------

// OcrRespond

// optional int32 type = 1;
inline bool OcrRespond::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OcrRespond::has_type() const {
  return _internal_has_type();
}
inline void OcrRespond::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t OcrRespond::_internal_type() const {
  return _impl_.type_;
}
inline int32_t OcrRespond::type() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRespond.type)
  return _internal_type();
}
inline void OcrRespond::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void OcrRespond::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wx3.OcrRespond.type)
}

// optional uint64 task_id = 2;
inline bool OcrRespond::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OcrRespond::has_task_id() const {
  return _internal_has_task_id();
}
inline void OcrRespond::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t OcrRespond::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t OcrRespond::task_id() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRespond.task_id)
  return _internal_task_id();
}
inline void OcrRespond::_internal_set_task_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_id_ = value;
}
inline void OcrRespond::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:wx3.OcrRespond.task_id)
}

// optional int32 err_code = 3;
inline bool OcrRespond::_internal_has_err_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OcrRespond::has_err_code() const {
  return _internal_has_err_code();
}
inline void OcrRespond::clear_err_code() {
  _impl_.err_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t OcrRespond::_internal_err_code() const {
  return _impl_.err_code_;
}
inline int32_t OcrRespond::err_code() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRespond.err_code)
  return _internal_err_code();
}
inline void OcrRespond::_internal_set_err_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.err_code_ = value;
}
inline void OcrRespond::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:wx3.OcrRespond.err_code)
}

// optional .wx3.OcrOutputBuffer ocr_result = 4;
inline bool OcrRespond::_internal_has_ocr_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ocr_result_ != nullptr);
  return value;
}
inline bool OcrRespond::has_ocr_result() const {
  return _internal_has_ocr_result();
}
inline void OcrRespond::clear_ocr_result() {
  if (_impl_.ocr_result_ != nullptr) _impl_.ocr_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wx3::OcrOutputBuffer& OcrRespond::_internal_ocr_result() const {
  const ::wx3::OcrOutputBuffer* p = _impl_.ocr_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::wx3::OcrOutputBuffer&>(
      ::wx3::_OcrOutputBuffer_default_instance_);
}
inline const ::wx3::OcrOutputBuffer& OcrRespond::ocr_result() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRespond.ocr_result)
  return _internal_ocr_result();
}
inline void OcrRespond::unsafe_arena_set_allocated_ocr_result(
    ::wx3::OcrOutputBuffer* ocr_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ocr_result_);
  }
  _impl_.ocr_result_ = ocr_result;
  if (ocr_result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wx3.OcrRespond.ocr_result)
}
inline ::wx3::OcrOutputBuffer* OcrRespond::release_ocr_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wx3::OcrOutputBuffer* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wx3::OcrOutputBuffer* OcrRespond::unsafe_arena_release_ocr_result() {
  // @@protoc_insertion_point(field_release:wx3.OcrRespond.ocr_result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wx3::OcrOutputBuffer* temp = _impl_.ocr_result_;
  _impl_.ocr_result_ = nullptr;
  return temp;
}
inline ::wx3::OcrOutputBuffer* OcrRespond::_internal_mutable_ocr_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ocr_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::wx3::OcrOutputBuffer>(GetArenaForAllocation());
    _impl_.ocr_result_ = p;
  }
  return _impl_.ocr_result_;
}
inline ::wx3::OcrOutputBuffer* OcrRespond::mutable_ocr_result() {
  ::wx3::OcrOutputBuffer* _msg = _internal_mutable_ocr_result();
  // @@protoc_insertion_point(field_mutable:wx3.OcrRespond.ocr_result)
  return _msg;
}
inline void OcrRespond::set_allocated_ocr_result(::wx3::OcrOutputBuffer* ocr_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ocr_result_;
  }
  if (ocr_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ocr_result);
    if (message_arena != submessage_arena) {
      ocr_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ocr_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ocr_result_ = ocr_result;
  // @@protoc_insertion_point(field_set_allocated:wx3.OcrRespond.ocr_result)
}

// -------------------------------------------------------------------

// OcrRequest

// int32 type = 1;
inline void OcrRequest::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t OcrRequest::_internal_type() const {
  return _impl_.type_;
}
inline int32_t OcrRequest::type() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRequest.type)
  return _internal_type();
}
inline void OcrRequest::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void OcrRequest::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wx3.OcrRequest.type)
}

// uint64 task_id = 2;
inline void OcrRequest::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
}
inline uint64_t OcrRequest::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t OcrRequest::task_id() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRequest.task_id)
  return _internal_task_id();
}
inline void OcrRequest::_internal_set_task_id(uint64_t value) {
  
  _impl_.task_id_ = value;
}
inline void OcrRequest::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:wx3.OcrRequest.task_id)
}

// .wx3.OcrInputBuffer input = 3;
inline bool OcrRequest::_internal_has_input() const {
  return this != internal_default_instance() && _impl_.input_ != nullptr;
}
inline bool OcrRequest::has_input() const {
  return _internal_has_input();
}
inline void OcrRequest::clear_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
}
inline const ::wx3::OcrInputBuffer& OcrRequest::_internal_input() const {
  const ::wx3::OcrInputBuffer* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::wx3::OcrInputBuffer&>(
      ::wx3::_OcrInputBuffer_default_instance_);
}
inline const ::wx3::OcrInputBuffer& OcrRequest::input() const {
  // @@protoc_insertion_point(field_get:wx3.OcrRequest.input)
  return _internal_input();
}
inline void OcrRequest::unsafe_arena_set_allocated_input(
    ::wx3::OcrInputBuffer* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wx3.OcrRequest.input)
}
inline ::wx3::OcrInputBuffer* OcrRequest::release_input() {
  
  ::wx3::OcrInputBuffer* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wx3::OcrInputBuffer* OcrRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:wx3.OcrRequest.input)
  
  ::wx3::OcrInputBuffer* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::wx3::OcrInputBuffer* OcrRequest::_internal_mutable_input() {
  
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::wx3::OcrInputBuffer>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::wx3::OcrInputBuffer* OcrRequest::mutable_input() {
  ::wx3::OcrInputBuffer* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:wx3.OcrRequest.input)
  return _msg;
}
inline void OcrRequest::set_allocated_input(::wx3::OcrInputBuffer* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:wx3.OcrRequest.input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wx3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx3_2eproto
