// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ocr_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ocr_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ocr_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ocr_5fcommon_2eproto {
  static const uint32_t offsets[];
};
namespace ocr_common {
class Box;
struct BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class OCRResultChar;
struct OCRResultCharDefaultTypeInternal;
extern OCRResultCharDefaultTypeInternal _OCRResultChar_default_instance_;
class OCRResultLine;
struct OCRResultLineDefaultTypeInternal;
extern OCRResultLineDefaultTypeInternal _OCRResultLine_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace ocr_common
PROTOBUF_NAMESPACE_OPEN
template<> ::ocr_common::Box* Arena::CreateMaybeMessage<::ocr_common::Box>(Arena*);
template<> ::ocr_common::OCRResultChar* Arena::CreateMaybeMessage<::ocr_common::OCRResultChar>(Arena*);
template<> ::ocr_common::OCRResultLine* Arena::CreateMaybeMessage<::ocr_common::OCRResultLine>(Arena*);
template<> ::ocr_common::Point* Arena::CreateMaybeMessage<::ocr_common::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ocr_common {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_common.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_common.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_common.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Box final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_common.Box) */ {
 public:
  inline Box() : Box(nullptr) {}
  ~Box() override;
  explicit PROTOBUF_CONSTEXPR Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_common.Box";
  }
  protected:
  explicit Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopleftFieldNumber = 1,
    kToprightFieldNumber = 2,
    kBottomrightFieldNumber = 3,
    kBottomleftFieldNumber = 4,
  };
  // optional .ocr_common.Point topleft = 1;
  bool has_topleft() const;
  private:
  bool _internal_has_topleft() const;
  public:
  void clear_topleft();
  const ::ocr_common::Point& topleft() const;
  PROTOBUF_NODISCARD ::ocr_common::Point* release_topleft();
  ::ocr_common::Point* mutable_topleft();
  void set_allocated_topleft(::ocr_common::Point* topleft);
  private:
  const ::ocr_common::Point& _internal_topleft() const;
  ::ocr_common::Point* _internal_mutable_topleft();
  public:
  void unsafe_arena_set_allocated_topleft(
      ::ocr_common::Point* topleft);
  ::ocr_common::Point* unsafe_arena_release_topleft();

  // optional .ocr_common.Point topright = 2;
  bool has_topright() const;
  private:
  bool _internal_has_topright() const;
  public:
  void clear_topright();
  const ::ocr_common::Point& topright() const;
  PROTOBUF_NODISCARD ::ocr_common::Point* release_topright();
  ::ocr_common::Point* mutable_topright();
  void set_allocated_topright(::ocr_common::Point* topright);
  private:
  const ::ocr_common::Point& _internal_topright() const;
  ::ocr_common::Point* _internal_mutable_topright();
  public:
  void unsafe_arena_set_allocated_topright(
      ::ocr_common::Point* topright);
  ::ocr_common::Point* unsafe_arena_release_topright();

  // optional .ocr_common.Point bottomright = 3;
  bool has_bottomright() const;
  private:
  bool _internal_has_bottomright() const;
  public:
  void clear_bottomright();
  const ::ocr_common::Point& bottomright() const;
  PROTOBUF_NODISCARD ::ocr_common::Point* release_bottomright();
  ::ocr_common::Point* mutable_bottomright();
  void set_allocated_bottomright(::ocr_common::Point* bottomright);
  private:
  const ::ocr_common::Point& _internal_bottomright() const;
  ::ocr_common::Point* _internal_mutable_bottomright();
  public:
  void unsafe_arena_set_allocated_bottomright(
      ::ocr_common::Point* bottomright);
  ::ocr_common::Point* unsafe_arena_release_bottomright();

  // optional .ocr_common.Point bottomleft = 4;
  bool has_bottomleft() const;
  private:
  bool _internal_has_bottomleft() const;
  public:
  void clear_bottomleft();
  const ::ocr_common::Point& bottomleft() const;
  PROTOBUF_NODISCARD ::ocr_common::Point* release_bottomleft();
  ::ocr_common::Point* mutable_bottomleft();
  void set_allocated_bottomleft(::ocr_common::Point* bottomleft);
  private:
  const ::ocr_common::Point& _internal_bottomleft() const;
  ::ocr_common::Point* _internal_mutable_bottomleft();
  public:
  void unsafe_arena_set_allocated_bottomleft(
      ::ocr_common::Point* bottomleft);
  ::ocr_common::Point* unsafe_arena_release_bottomleft();

  // @@protoc_insertion_point(class_scope:ocr_common.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ocr_common::Point* topleft_;
    ::ocr_common::Point* topright_;
    ::ocr_common::Point* bottomright_;
    ::ocr_common::Point* bottomleft_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class OCRResultChar final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_common.OCRResultChar) */ {
 public:
  inline OCRResultChar() : OCRResultChar(nullptr) {}
  ~OCRResultChar() override;
  explicit PROTOBUF_CONSTEXPR OCRResultChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRResultChar(const OCRResultChar& from);
  OCRResultChar(OCRResultChar&& from) noexcept
    : OCRResultChar() {
    *this = ::std::move(from);
  }

  inline OCRResultChar& operator=(const OCRResultChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRResultChar& operator=(OCRResultChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OCRResultChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRResultChar* internal_default_instance() {
    return reinterpret_cast<const OCRResultChar*>(
               &_OCRResultChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OCRResultChar& a, OCRResultChar& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRResultChar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRResultChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRResultChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRResultChar>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OCRResultChar& from);
  void MergeFrom(const OCRResultChar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OCRResultChar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_common.OCRResultChar";
  }
  protected:
  explicit OCRResultChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharsFieldNumber = 2,
    kCharBoxFieldNumber = 1,
  };
  // optional string chars = 2;
  bool has_chars() const;
  private:
  bool _internal_has_chars() const;
  public:
  void clear_chars();
  const std::string& chars() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chars(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chars();
  PROTOBUF_NODISCARD std::string* release_chars();
  void set_allocated_chars(std::string* chars);
  private:
  const std::string& _internal_chars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chars(const std::string& value);
  std::string* _internal_mutable_chars();
  public:

  // optional .ocr_common.Box char_box = 1;
  bool has_char_box() const;
  private:
  bool _internal_has_char_box() const;
  public:
  void clear_char_box();
  const ::ocr_common::Box& char_box() const;
  PROTOBUF_NODISCARD ::ocr_common::Box* release_char_box();
  ::ocr_common::Box* mutable_char_box();
  void set_allocated_char_box(::ocr_common::Box* char_box);
  private:
  const ::ocr_common::Box& _internal_char_box() const;
  ::ocr_common::Box* _internal_mutable_char_box();
  public:
  void unsafe_arena_set_allocated_char_box(
      ::ocr_common::Box* char_box);
  ::ocr_common::Box* unsafe_arena_release_char_box();

  // @@protoc_insertion_point(class_scope:ocr_common.OCRResultChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chars_;
    ::ocr_common::Box* char_box_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class OCRResultLine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ocr_common.OCRResultLine) */ {
 public:
  inline OCRResultLine() : OCRResultLine(nullptr) {}
  ~OCRResultLine() override;
  explicit PROTOBUF_CONSTEXPR OCRResultLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRResultLine(const OCRResultLine& from);
  OCRResultLine(OCRResultLine&& from) noexcept
    : OCRResultLine() {
    *this = ::std::move(from);
  }

  inline OCRResultLine& operator=(const OCRResultLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRResultLine& operator=(OCRResultLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OCRResultLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRResultLine* internal_default_instance() {
    return reinterpret_cast<const OCRResultLine*>(
               &_OCRResultLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OCRResultLine& a, OCRResultLine& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRResultLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRResultLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRResultLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRResultLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OCRResultLine& from);
  void MergeFrom(const OCRResultLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OCRResultLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ocr_common.OCRResultLine";
  }
  protected:
  explicit OCRResultLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 4,
    kTextFieldNumber = 2,
    kLineBoxFieldNumber = 1,
    kBox10FieldNumber = 10,
    kRateFieldNumber = 3,
    kLeftFieldNumber = 5,
    kTopFieldNumber = 6,
    kRightFieldNumber = 7,
    kBottomFieldNumber = 8,
    kUnknown0FieldNumber = 9,
  };
  // repeated .ocr_common.OCRResultChar blocks = 4;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::ocr_common::OCRResultChar* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultChar >*
      mutable_blocks();
  private:
  const ::ocr_common::OCRResultChar& _internal_blocks(int index) const;
  ::ocr_common::OCRResultChar* _internal_add_blocks();
  public:
  const ::ocr_common::OCRResultChar& blocks(int index) const;
  ::ocr_common::OCRResultChar* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultChar >&
      blocks() const;

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .ocr_common.Box line_box = 1;
  bool has_line_box() const;
  private:
  bool _internal_has_line_box() const;
  public:
  void clear_line_box();
  const ::ocr_common::Box& line_box() const;
  PROTOBUF_NODISCARD ::ocr_common::Box* release_line_box();
  ::ocr_common::Box* mutable_line_box();
  void set_allocated_line_box(::ocr_common::Box* line_box);
  private:
  const ::ocr_common::Box& _internal_line_box() const;
  ::ocr_common::Box* _internal_mutable_line_box();
  public:
  void unsafe_arena_set_allocated_line_box(
      ::ocr_common::Box* line_box);
  ::ocr_common::Box* unsafe_arena_release_line_box();

  // optional .ocr_common.Box box10 = 10;
  bool has_box10() const;
  private:
  bool _internal_has_box10() const;
  public:
  void clear_box10();
  const ::ocr_common::Box& box10() const;
  PROTOBUF_NODISCARD ::ocr_common::Box* release_box10();
  ::ocr_common::Box* mutable_box10();
  void set_allocated_box10(::ocr_common::Box* box10);
  private:
  const ::ocr_common::Box& _internal_box10() const;
  ::ocr_common::Box* _internal_mutable_box10();
  public:
  void unsafe_arena_set_allocated_box10(
      ::ocr_common::Box* box10);
  ::ocr_common::Box* unsafe_arena_release_box10();

  // float rate = 3;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // float left = 5;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float top = 6;
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // float right = 7;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float bottom = 8;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // optional bool unknown_0 = 9;
  bool has_unknown_0() const;
  private:
  bool _internal_has_unknown_0() const;
  public:
  void clear_unknown_0();
  bool unknown_0() const;
  void set_unknown_0(bool value);
  private:
  bool _internal_unknown_0() const;
  void _internal_set_unknown_0(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ocr_common.OCRResultLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultChar > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::ocr_common::Box* line_box_;
    ::ocr_common::Box* box10_;
    float rate_;
    float left_;
    float top_;
    float right_;
    float bottom_;
    bool unknown_0_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// optional float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return _impl_.x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:ocr_common.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ocr_common.Point.x)
}

// optional float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return _impl_.y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:ocr_common.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ocr_common.Point.y)
}

// -------------------------------------------------------------------

// Box

// optional .ocr_common.Point topleft = 1;
inline bool Box::_internal_has_topleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topleft_ != nullptr);
  return value;
}
inline bool Box::has_topleft() const {
  return _internal_has_topleft();
}
inline void Box::clear_topleft() {
  if (_impl_.topleft_ != nullptr) _impl_.topleft_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ocr_common::Point& Box::_internal_topleft() const {
  const ::ocr_common::Point* p = _impl_.topleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Point&>(
      ::ocr_common::_Point_default_instance_);
}
inline const ::ocr_common::Point& Box::topleft() const {
  // @@protoc_insertion_point(field_get:ocr_common.Box.topleft)
  return _internal_topleft();
}
inline void Box::unsafe_arena_set_allocated_topleft(
    ::ocr_common::Point* topleft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topleft_);
  }
  _impl_.topleft_ = topleft;
  if (topleft) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.Box.topleft)
}
inline ::ocr_common::Point* Box::release_topleft() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_common::Point* temp = _impl_.topleft_;
  _impl_.topleft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Point* Box::unsafe_arena_release_topleft() {
  // @@protoc_insertion_point(field_release:ocr_common.Box.topleft)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_common::Point* temp = _impl_.topleft_;
  _impl_.topleft_ = nullptr;
  return temp;
}
inline ::ocr_common::Point* Box::_internal_mutable_topleft() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.topleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Point>(GetArenaForAllocation());
    _impl_.topleft_ = p;
  }
  return _impl_.topleft_;
}
inline ::ocr_common::Point* Box::mutable_topleft() {
  ::ocr_common::Point* _msg = _internal_mutable_topleft();
  // @@protoc_insertion_point(field_mutable:ocr_common.Box.topleft)
  return _msg;
}
inline void Box::set_allocated_topleft(::ocr_common::Point* topleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topleft_;
  }
  if (topleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topleft);
    if (message_arena != submessage_arena) {
      topleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleft, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topleft_ = topleft;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.Box.topleft)
}

// optional .ocr_common.Point topright = 2;
inline bool Box::_internal_has_topright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topright_ != nullptr);
  return value;
}
inline bool Box::has_topright() const {
  return _internal_has_topright();
}
inline void Box::clear_topright() {
  if (_impl_.topright_ != nullptr) _impl_.topright_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ocr_common::Point& Box::_internal_topright() const {
  const ::ocr_common::Point* p = _impl_.topright_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Point&>(
      ::ocr_common::_Point_default_instance_);
}
inline const ::ocr_common::Point& Box::topright() const {
  // @@protoc_insertion_point(field_get:ocr_common.Box.topright)
  return _internal_topright();
}
inline void Box::unsafe_arena_set_allocated_topright(
    ::ocr_common::Point* topright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topright_);
  }
  _impl_.topright_ = topright;
  if (topright) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.Box.topright)
}
inline ::ocr_common::Point* Box::release_topright() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_common::Point* temp = _impl_.topright_;
  _impl_.topright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Point* Box::unsafe_arena_release_topright() {
  // @@protoc_insertion_point(field_release:ocr_common.Box.topright)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_common::Point* temp = _impl_.topright_;
  _impl_.topright_ = nullptr;
  return temp;
}
inline ::ocr_common::Point* Box::_internal_mutable_topright() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.topright_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Point>(GetArenaForAllocation());
    _impl_.topright_ = p;
  }
  return _impl_.topright_;
}
inline ::ocr_common::Point* Box::mutable_topright() {
  ::ocr_common::Point* _msg = _internal_mutable_topright();
  // @@protoc_insertion_point(field_mutable:ocr_common.Box.topright)
  return _msg;
}
inline void Box::set_allocated_topright(::ocr_common::Point* topright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topright_;
  }
  if (topright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topright);
    if (message_arena != submessage_arena) {
      topright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topright, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.topright_ = topright;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.Box.topright)
}

// optional .ocr_common.Point bottomright = 3;
inline bool Box::_internal_has_bottomright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottomright_ != nullptr);
  return value;
}
inline bool Box::has_bottomright() const {
  return _internal_has_bottomright();
}
inline void Box::clear_bottomright() {
  if (_impl_.bottomright_ != nullptr) _impl_.bottomright_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ocr_common::Point& Box::_internal_bottomright() const {
  const ::ocr_common::Point* p = _impl_.bottomright_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Point&>(
      ::ocr_common::_Point_default_instance_);
}
inline const ::ocr_common::Point& Box::bottomright() const {
  // @@protoc_insertion_point(field_get:ocr_common.Box.bottomright)
  return _internal_bottomright();
}
inline void Box::unsafe_arena_set_allocated_bottomright(
    ::ocr_common::Point* bottomright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomright_);
  }
  _impl_.bottomright_ = bottomright;
  if (bottomright) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.Box.bottomright)
}
inline ::ocr_common::Point* Box::release_bottomright() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ocr_common::Point* temp = _impl_.bottomright_;
  _impl_.bottomright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Point* Box::unsafe_arena_release_bottomright() {
  // @@protoc_insertion_point(field_release:ocr_common.Box.bottomright)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ocr_common::Point* temp = _impl_.bottomright_;
  _impl_.bottomright_ = nullptr;
  return temp;
}
inline ::ocr_common::Point* Box::_internal_mutable_bottomright() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.bottomright_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Point>(GetArenaForAllocation());
    _impl_.bottomright_ = p;
  }
  return _impl_.bottomright_;
}
inline ::ocr_common::Point* Box::mutable_bottomright() {
  ::ocr_common::Point* _msg = _internal_mutable_bottomright();
  // @@protoc_insertion_point(field_mutable:ocr_common.Box.bottomright)
  return _msg;
}
inline void Box::set_allocated_bottomright(::ocr_common::Point* bottomright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottomright_;
  }
  if (bottomright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottomright);
    if (message_arena != submessage_arena) {
      bottomright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomright, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bottomright_ = bottomright;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.Box.bottomright)
}

// optional .ocr_common.Point bottomleft = 4;
inline bool Box::_internal_has_bottomleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottomleft_ != nullptr);
  return value;
}
inline bool Box::has_bottomleft() const {
  return _internal_has_bottomleft();
}
inline void Box::clear_bottomleft() {
  if (_impl_.bottomleft_ != nullptr) _impl_.bottomleft_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ocr_common::Point& Box::_internal_bottomleft() const {
  const ::ocr_common::Point* p = _impl_.bottomleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Point&>(
      ::ocr_common::_Point_default_instance_);
}
inline const ::ocr_common::Point& Box::bottomleft() const {
  // @@protoc_insertion_point(field_get:ocr_common.Box.bottomleft)
  return _internal_bottomleft();
}
inline void Box::unsafe_arena_set_allocated_bottomleft(
    ::ocr_common::Point* bottomleft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomleft_);
  }
  _impl_.bottomleft_ = bottomleft;
  if (bottomleft) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.Box.bottomleft)
}
inline ::ocr_common::Point* Box::release_bottomleft() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ocr_common::Point* temp = _impl_.bottomleft_;
  _impl_.bottomleft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Point* Box::unsafe_arena_release_bottomleft() {
  // @@protoc_insertion_point(field_release:ocr_common.Box.bottomleft)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ocr_common::Point* temp = _impl_.bottomleft_;
  _impl_.bottomleft_ = nullptr;
  return temp;
}
inline ::ocr_common::Point* Box::_internal_mutable_bottomleft() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottomleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Point>(GetArenaForAllocation());
    _impl_.bottomleft_ = p;
  }
  return _impl_.bottomleft_;
}
inline ::ocr_common::Point* Box::mutable_bottomleft() {
  ::ocr_common::Point* _msg = _internal_mutable_bottomleft();
  // @@protoc_insertion_point(field_mutable:ocr_common.Box.bottomleft)
  return _msg;
}
inline void Box::set_allocated_bottomleft(::ocr_common::Point* bottomleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottomleft_;
  }
  if (bottomleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottomleft);
    if (message_arena != submessage_arena) {
      bottomleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomleft, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottomleft_ = bottomleft;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.Box.bottomleft)
}

// -------------------------------------------------------------------

// OCRResultChar

// optional .ocr_common.Box char_box = 1;
inline bool OCRResultChar::_internal_has_char_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.char_box_ != nullptr);
  return value;
}
inline bool OCRResultChar::has_char_box() const {
  return _internal_has_char_box();
}
inline void OCRResultChar::clear_char_box() {
  if (_impl_.char_box_ != nullptr) _impl_.char_box_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ocr_common::Box& OCRResultChar::_internal_char_box() const {
  const ::ocr_common::Box* p = _impl_.char_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Box&>(
      ::ocr_common::_Box_default_instance_);
}
inline const ::ocr_common::Box& OCRResultChar::char_box() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultChar.char_box)
  return _internal_char_box();
}
inline void OCRResultChar::unsafe_arena_set_allocated_char_box(
    ::ocr_common::Box* char_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.char_box_);
  }
  _impl_.char_box_ = char_box;
  if (char_box) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.OCRResultChar.char_box)
}
inline ::ocr_common::Box* OCRResultChar::release_char_box() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_common::Box* temp = _impl_.char_box_;
  _impl_.char_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Box* OCRResultChar::unsafe_arena_release_char_box() {
  // @@protoc_insertion_point(field_release:ocr_common.OCRResultChar.char_box)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ocr_common::Box* temp = _impl_.char_box_;
  _impl_.char_box_ = nullptr;
  return temp;
}
inline ::ocr_common::Box* OCRResultChar::_internal_mutable_char_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.char_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Box>(GetArenaForAllocation());
    _impl_.char_box_ = p;
  }
  return _impl_.char_box_;
}
inline ::ocr_common::Box* OCRResultChar::mutable_char_box() {
  ::ocr_common::Box* _msg = _internal_mutable_char_box();
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultChar.char_box)
  return _msg;
}
inline void OCRResultChar::set_allocated_char_box(::ocr_common::Box* char_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.char_box_;
  }
  if (char_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(char_box);
    if (message_arena != submessage_arena) {
      char_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.char_box_ = char_box;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.OCRResultChar.char_box)
}

// optional string chars = 2;
inline bool OCRResultChar::_internal_has_chars() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OCRResultChar::has_chars() const {
  return _internal_has_chars();
}
inline void OCRResultChar::clear_chars() {
  _impl_.chars_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OCRResultChar::chars() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultChar.chars)
  return _internal_chars();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRResultChar::set_chars(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chars_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultChar.chars)
}
inline std::string* OCRResultChar::mutable_chars() {
  std::string* _s = _internal_mutable_chars();
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultChar.chars)
  return _s;
}
inline const std::string& OCRResultChar::_internal_chars() const {
  return _impl_.chars_.Get();
}
inline void OCRResultChar::_internal_set_chars(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chars_.Set(value, GetArenaForAllocation());
}
inline std::string* OCRResultChar::_internal_mutable_chars() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chars_.Mutable(GetArenaForAllocation());
}
inline std::string* OCRResultChar::release_chars() {
  // @@protoc_insertion_point(field_release:ocr_common.OCRResultChar.chars)
  if (!_internal_has_chars()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chars_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chars_.IsDefault()) {
    _impl_.chars_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OCRResultChar::set_allocated_chars(std::string* chars) {
  if (chars != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chars_.SetAllocated(chars, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chars_.IsDefault()) {
    _impl_.chars_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_common.OCRResultChar.chars)
}

// -------------------------------------------------------------------

// OCRResultLine

// .ocr_common.Box line_box = 1;
inline bool OCRResultLine::_internal_has_line_box() const {
  return this != internal_default_instance() && _impl_.line_box_ != nullptr;
}
inline bool OCRResultLine::has_line_box() const {
  return _internal_has_line_box();
}
inline void OCRResultLine::clear_line_box() {
  if (GetArenaForAllocation() == nullptr && _impl_.line_box_ != nullptr) {
    delete _impl_.line_box_;
  }
  _impl_.line_box_ = nullptr;
}
inline const ::ocr_common::Box& OCRResultLine::_internal_line_box() const {
  const ::ocr_common::Box* p = _impl_.line_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Box&>(
      ::ocr_common::_Box_default_instance_);
}
inline const ::ocr_common::Box& OCRResultLine::line_box() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.line_box)
  return _internal_line_box();
}
inline void OCRResultLine::unsafe_arena_set_allocated_line_box(
    ::ocr_common::Box* line_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.line_box_);
  }
  _impl_.line_box_ = line_box;
  if (line_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.OCRResultLine.line_box)
}
inline ::ocr_common::Box* OCRResultLine::release_line_box() {
  
  ::ocr_common::Box* temp = _impl_.line_box_;
  _impl_.line_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Box* OCRResultLine::unsafe_arena_release_line_box() {
  // @@protoc_insertion_point(field_release:ocr_common.OCRResultLine.line_box)
  
  ::ocr_common::Box* temp = _impl_.line_box_;
  _impl_.line_box_ = nullptr;
  return temp;
}
inline ::ocr_common::Box* OCRResultLine::_internal_mutable_line_box() {
  
  if (_impl_.line_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Box>(GetArenaForAllocation());
    _impl_.line_box_ = p;
  }
  return _impl_.line_box_;
}
inline ::ocr_common::Box* OCRResultLine::mutable_line_box() {
  ::ocr_common::Box* _msg = _internal_mutable_line_box();
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultLine.line_box)
  return _msg;
}
inline void OCRResultLine::set_allocated_line_box(::ocr_common::Box* line_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.line_box_;
  }
  if (line_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(line_box);
    if (message_arena != submessage_arena) {
      line_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_box, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.line_box_ = line_box;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.OCRResultLine.line_box)
}

// string text = 2;
inline void OCRResultLine::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& OCRResultLine::text() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRResultLine::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.text)
}
inline std::string* OCRResultLine::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultLine.text)
  return _s;
}
inline const std::string& OCRResultLine::_internal_text() const {
  return _impl_.text_.Get();
}
inline void OCRResultLine::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* OCRResultLine::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* OCRResultLine::release_text() {
  // @@protoc_insertion_point(field_release:ocr_common.OCRResultLine.text)
  return _impl_.text_.Release();
}
inline void OCRResultLine::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ocr_common.OCRResultLine.text)
}

// float rate = 3;
inline void OCRResultLine::clear_rate() {
  _impl_.rate_ = 0;
}
inline float OCRResultLine::_internal_rate() const {
  return _impl_.rate_;
}
inline float OCRResultLine::rate() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.rate)
  return _internal_rate();
}
inline void OCRResultLine::_internal_set_rate(float value) {
  
  _impl_.rate_ = value;
}
inline void OCRResultLine::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.rate)
}

// repeated .ocr_common.OCRResultChar blocks = 4;
inline int OCRResultLine::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int OCRResultLine::blocks_size() const {
  return _internal_blocks_size();
}
inline void OCRResultLine::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::ocr_common::OCRResultChar* OCRResultLine::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultLine.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultChar >*
OCRResultLine::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ocr_common.OCRResultLine.blocks)
  return &_impl_.blocks_;
}
inline const ::ocr_common::OCRResultChar& OCRResultLine::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::ocr_common::OCRResultChar& OCRResultLine::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.blocks)
  return _internal_blocks(index);
}
inline ::ocr_common::OCRResultChar* OCRResultLine::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::ocr_common::OCRResultChar* OCRResultLine::add_blocks() {
  ::ocr_common::OCRResultChar* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:ocr_common.OCRResultLine.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultChar >&
OCRResultLine::blocks() const {
  // @@protoc_insertion_point(field_list:ocr_common.OCRResultLine.blocks)
  return _impl_.blocks_;
}

// float left = 5;
inline void OCRResultLine::clear_left() {
  _impl_.left_ = 0;
}
inline float OCRResultLine::_internal_left() const {
  return _impl_.left_;
}
inline float OCRResultLine::left() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.left)
  return _internal_left();
}
inline void OCRResultLine::_internal_set_left(float value) {
  
  _impl_.left_ = value;
}
inline void OCRResultLine::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.left)
}

// float top = 6;
inline void OCRResultLine::clear_top() {
  _impl_.top_ = 0;
}
inline float OCRResultLine::_internal_top() const {
  return _impl_.top_;
}
inline float OCRResultLine::top() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.top)
  return _internal_top();
}
inline void OCRResultLine::_internal_set_top(float value) {
  
  _impl_.top_ = value;
}
inline void OCRResultLine::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.top)
}

// float right = 7;
inline void OCRResultLine::clear_right() {
  _impl_.right_ = 0;
}
inline float OCRResultLine::_internal_right() const {
  return _impl_.right_;
}
inline float OCRResultLine::right() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.right)
  return _internal_right();
}
inline void OCRResultLine::_internal_set_right(float value) {
  
  _impl_.right_ = value;
}
inline void OCRResultLine::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.right)
}

// float bottom = 8;
inline void OCRResultLine::clear_bottom() {
  _impl_.bottom_ = 0;
}
inline float OCRResultLine::_internal_bottom() const {
  return _impl_.bottom_;
}
inline float OCRResultLine::bottom() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.bottom)
  return _internal_bottom();
}
inline void OCRResultLine::_internal_set_bottom(float value) {
  
  _impl_.bottom_ = value;
}
inline void OCRResultLine::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.bottom)
}

// optional bool unknown_0 = 9;
inline bool OCRResultLine::_internal_has_unknown_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OCRResultLine::has_unknown_0() const {
  return _internal_has_unknown_0();
}
inline void OCRResultLine::clear_unknown_0() {
  _impl_.unknown_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool OCRResultLine::_internal_unknown_0() const {
  return _impl_.unknown_0_;
}
inline bool OCRResultLine::unknown_0() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.unknown_0)
  return _internal_unknown_0();
}
inline void OCRResultLine::_internal_set_unknown_0(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unknown_0_ = value;
}
inline void OCRResultLine::set_unknown_0(bool value) {
  _internal_set_unknown_0(value);
  // @@protoc_insertion_point(field_set:ocr_common.OCRResultLine.unknown_0)
}

// optional .ocr_common.Box box10 = 10;
inline bool OCRResultLine::_internal_has_box10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box10_ != nullptr);
  return value;
}
inline bool OCRResultLine::has_box10() const {
  return _internal_has_box10();
}
inline void OCRResultLine::clear_box10() {
  if (_impl_.box10_ != nullptr) _impl_.box10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ocr_common::Box& OCRResultLine::_internal_box10() const {
  const ::ocr_common::Box* p = _impl_.box10_;
  return p != nullptr ? *p : reinterpret_cast<const ::ocr_common::Box&>(
      ::ocr_common::_Box_default_instance_);
}
inline const ::ocr_common::Box& OCRResultLine::box10() const {
  // @@protoc_insertion_point(field_get:ocr_common.OCRResultLine.box10)
  return _internal_box10();
}
inline void OCRResultLine::unsafe_arena_set_allocated_box10(
    ::ocr_common::Box* box10) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box10_);
  }
  _impl_.box10_ = box10;
  if (box10) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ocr_common.OCRResultLine.box10)
}
inline ::ocr_common::Box* OCRResultLine::release_box10() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_common::Box* temp = _impl_.box10_;
  _impl_.box10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ocr_common::Box* OCRResultLine::unsafe_arena_release_box10() {
  // @@protoc_insertion_point(field_release:ocr_common.OCRResultLine.box10)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ocr_common::Box* temp = _impl_.box10_;
  _impl_.box10_ = nullptr;
  return temp;
}
inline ::ocr_common::Box* OCRResultLine::_internal_mutable_box10() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.box10_ == nullptr) {
    auto* p = CreateMaybeMessage<::ocr_common::Box>(GetArenaForAllocation());
    _impl_.box10_ = p;
  }
  return _impl_.box10_;
}
inline ::ocr_common::Box* OCRResultLine::mutable_box10() {
  ::ocr_common::Box* _msg = _internal_mutable_box10();
  // @@protoc_insertion_point(field_mutable:ocr_common.OCRResultLine.box10)
  return _msg;
}
inline void OCRResultLine::set_allocated_box10(::ocr_common::Box* box10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.box10_;
  }
  if (box10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box10);
    if (message_arena != submessage_arena) {
      box10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box10, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.box10_ = box10;
  // @@protoc_insertion_point(field_set_allocated:ocr_common.OCRResultLine.box10)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocr_common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ocr_5fcommon_2eproto
