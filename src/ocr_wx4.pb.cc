// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_wx4.proto

#include "ocr_wx4.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wx4 {
PROTOBUF_CONSTEXPR OCRSupportMessage::OCRSupportMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.supported_)*/false} {}
struct OCRSupportMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OCRSupportMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OCRSupportMessageDefaultTypeInternal() {}
  union {
    OCRSupportMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OCRSupportMessageDefaultTypeInternal _OCRSupportMessage_default_instance_;
PROTOBUF_CONSTEXPR ReqType::ReqType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.t1_)*/false
  , /*decltype(_impl_.t2_)*/false
  , /*decltype(_impl_.t3_)*/false} {}
struct ReqTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqTypeDefaultTypeInternal() {}
  union {
    ReqType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqTypeDefaultTypeInternal _ReqType_default_instance_;
PROTOBUF_CONSTEXPR ParseOCRReqMessage::ParseOCRReqMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pic_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pic_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rt_)*/nullptr
  , /*decltype(_impl_.task_id_)*/uint64_t{0u}
  , /*decltype(_impl_.xx3_)*/0u
  , /*decltype(_impl_.xx4_)*/0u} {}
struct ParseOCRReqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParseOCRReqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParseOCRReqMessageDefaultTypeInternal() {}
  union {
    ParseOCRReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParseOCRReqMessageDefaultTypeInternal _ParseOCRReqMessage_default_instance_;
PROTOBUF_CONSTEXPR OCRResultInfo::OCRResultInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.cpu_report_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.img_width_)*/0u
  , /*decltype(_impl_.img_height_)*/0u
  , /*decltype(_impl_.time_used_)*/uint64_t{0u}} {}
struct OCRResultInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OCRResultInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OCRResultInfoDefaultTypeInternal() {}
  union {
    OCRResultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OCRResultInfoDefaultTypeInternal _OCRResultInfo_default_instance_;
PROTOBUF_CONSTEXPR QRResultInfo::QRResultInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct QRResultInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QRResultInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QRResultInfoDefaultTypeInternal() {}
  union {
    QRResultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QRResultInfoDefaultTypeInternal _QRResultInfo_default_instance_;
PROTOBUF_CONSTEXPR MMFGResultInfo::MMFGResultInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct MMFGResultInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MMFGResultInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MMFGResultInfoDefaultTypeInternal() {}
  union {
    MMFGResultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MMFGResultInfoDefaultTypeInternal _MMFGResultInfo_default_instance_;
PROTOBUF_CONSTEXPR ParseOCRRespMessage::ParseOCRRespMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qrcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mmfg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.res_)*/nullptr
  , /*decltype(_impl_.rt_)*/nullptr
  , /*decltype(_impl_.task_id_)*/uint64_t{0u}
  , /*decltype(_impl_.err_code_)*/0} {}
struct ParseOCRRespMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParseOCRRespMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParseOCRRespMessageDefaultTypeInternal() {}
  union {
    ParseOCRRespMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParseOCRRespMessageDefaultTypeInternal _ParseOCRRespMessage_default_instance_;
}  // namespace wx4
namespace wx4 {

// ===================================================================

class OCRSupportMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<OCRSupportMessage>()._impl_._has_bits_);
  static void set_has_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OCRSupportMessage::OCRSupportMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.OCRSupportMessage)
}
OCRSupportMessage::OCRSupportMessage(const OCRSupportMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OCRSupportMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supported_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.supported_ = from._impl_.supported_;
  // @@protoc_insertion_point(copy_constructor:wx4.OCRSupportMessage)
}

inline void OCRSupportMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supported_){false}
  };
}

OCRSupportMessage::~OCRSupportMessage() {
  // @@protoc_insertion_point(destructor:wx4.OCRSupportMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OCRSupportMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OCRSupportMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OCRSupportMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.OCRSupportMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supported_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OCRSupportMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_supported(&has_bits);
          _impl_.supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OCRSupportMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.OCRSupportMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool supported = 1;
  if (_internal_has_supported()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_supported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.OCRSupportMessage)
  return target;
}

size_t OCRSupportMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.OCRSupportMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool supported = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRSupportMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OCRSupportMessage*>(
      &from));
}

void OCRSupportMessage::MergeFrom(const OCRSupportMessage& from) {
  OCRSupportMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.OCRSupportMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_supported()) {
    _this->_internal_set_supported(from._internal_supported());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OCRSupportMessage::CopyFrom(const OCRSupportMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.OCRSupportMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRSupportMessage::IsInitialized() const {
  return true;
}

void OCRSupportMessage::InternalSwap(OCRSupportMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.supported_, other->_impl_.supported_);
}

std::string OCRSupportMessage::GetTypeName() const {
  return "wx4.OCRSupportMessage";
}


// ===================================================================

class ReqType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReqType>()._impl_._has_bits_);
  static void set_has_t1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReqType::ReqType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.ReqType)
}
ReqType::ReqType(const ReqType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ReqType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.t1_){}
    , decltype(_impl_.t2_){}
    , decltype(_impl_.t3_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.t1_, &from._impl_.t1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t3_) -
    reinterpret_cast<char*>(&_impl_.t1_)) + sizeof(_impl_.t3_));
  // @@protoc_insertion_point(copy_constructor:wx4.ReqType)
}

inline void ReqType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.t1_){false}
    , decltype(_impl_.t2_){false}
    , decltype(_impl_.t3_){false}
  };
}

ReqType::~ReqType() {
  // @@protoc_insertion_point(destructor:wx4.ReqType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqType::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.ReqType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.t1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.t3_) -
      reinterpret_cast<char*>(&_impl_.t1_)) + sizeof(_impl_.t3_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReqType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool t1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_t1(&has_bits);
          _impl_.t1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool t2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_t2(&has_bits);
          _impl_.t2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool t3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_t3(&has_bits);
          _impl_.t3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.ReqType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool t1 = 1;
  if (_internal_has_t1()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_t1(), target);
  }

  // optional bool t2 = 2;
  if (_internal_has_t2()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_t2(), target);
  }

  // optional bool t3 = 3;
  if (_internal_has_t3()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_t3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.ReqType)
  return target;
}

size_t ReqType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.ReqType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool t1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool t2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool t3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReqType*>(
      &from));
}

void ReqType::MergeFrom(const ReqType& from) {
  ReqType* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.ReqType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.t1_ = from._impl_.t1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.t2_ = from._impl_.t2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.t3_ = from._impl_.t3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReqType::CopyFrom(const ReqType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.ReqType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqType::IsInitialized() const {
  return true;
}

void ReqType::InternalSwap(ReqType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqType, _impl_.t3_)
      + sizeof(ReqType::_impl_.t3_)
      - PROTOBUF_FIELD_OFFSET(ReqType, _impl_.t1_)>(
          reinterpret_cast<char*>(&_impl_.t1_),
          reinterpret_cast<char*>(&other->_impl_.t1_));
}

std::string ReqType::GetTypeName() const {
  return "wx4.ReqType";
}


// ===================================================================

class ParseOCRReqMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ParseOCRReqMessage>()._impl_._has_bits_);
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pic_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xx3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_xx4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pic_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wx4::ReqType& rt(const ParseOCRReqMessage* msg);
  static void set_has_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wx4::ReqType&
ParseOCRReqMessage::_Internal::rt(const ParseOCRReqMessage* msg) {
  return *msg->_impl_.rt_;
}
ParseOCRReqMessage::ParseOCRReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.ParseOCRReqMessage)
}
ParseOCRReqMessage::ParseOCRReqMessage(const ParseOCRReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ParseOCRReqMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pic_path_){}
    , decltype(_impl_.pic_data_){}
    , decltype(_impl_.rt_){nullptr}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.xx3_){}
    , decltype(_impl_.xx4_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.pic_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pic_path()) {
    _this->_impl_.pic_path_.Set(from._internal_pic_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pic_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pic_data()) {
    _this->_impl_.pic_data_.Set(from._internal_pic_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rt()) {
    _this->_impl_.rt_ = new ::wx4::ReqType(*from._impl_.rt_);
  }
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xx4_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.xx4_));
  // @@protoc_insertion_point(copy_constructor:wx4.ParseOCRReqMessage)
}

inline void ParseOCRReqMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pic_path_){}
    , decltype(_impl_.pic_data_){}
    , decltype(_impl_.rt_){nullptr}
    , decltype(_impl_.task_id_){uint64_t{0u}}
    , decltype(_impl_.xx3_){0u}
    , decltype(_impl_.xx4_){0u}
  };
  _impl_.pic_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pic_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParseOCRReqMessage::~ParseOCRReqMessage() {
  // @@protoc_insertion_point(destructor:wx4.ParseOCRReqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParseOCRReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pic_path_.Destroy();
  _impl_.pic_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rt_;
}

void ParseOCRReqMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParseOCRReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.ParseOCRReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pic_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pic_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rt_ != nullptr);
      _impl_.rt_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xx4_) -
        reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.xx4_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ParseOCRReqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pic_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pic_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xx3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_xx3(&has_bits);
          _impl_.xx3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xx4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_xx4(&has_bits);
          _impl_.xx4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes pic_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pic_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wx4.ReqType rt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParseOCRReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.ParseOCRReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 task_id = 1;
  if (_internal_has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // optional string pic_path = 2;
  if (_internal_has_pic_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pic_path().data(), static_cast<int>(this->_internal_pic_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wx4.ParseOCRReqMessage.pic_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pic_path(), target);
  }

  // optional uint32 xx3 = 3;
  if (_internal_has_xx3()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_xx3(), target);
  }

  // optional uint32 xx4 = 4;
  if (_internal_has_xx4()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xx4(), target);
  }

  // optional bytes pic_data = 5;
  if (_internal_has_pic_data()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pic_data(), target);
  }

  // optional .wx4.ReqType rt = 6;
  if (_internal_has_rt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rt(this),
        _Internal::rt(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.ParseOCRReqMessage)
  return target;
}

size_t ParseOCRReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.ParseOCRReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string pic_path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pic_path());
    }

    // optional bytes pic_data = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pic_data());
    }

    // optional .wx4.ReqType rt = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rt_);
    }

    // optional uint64 task_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_task_id());
    }

    // optional uint32 xx3 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xx3());
    }

    // optional uint32 xx4 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xx4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParseOCRReqMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ParseOCRReqMessage*>(
      &from));
}

void ParseOCRReqMessage::MergeFrom(const ParseOCRReqMessage& from) {
  ParseOCRReqMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.ParseOCRReqMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pic_path(from._internal_pic_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pic_data(from._internal_pic_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rt()->::wx4::ReqType::MergeFrom(
          from._internal_rt());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.xx3_ = from._impl_.xx3_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.xx4_ = from._impl_.xx4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ParseOCRReqMessage::CopyFrom(const ParseOCRReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.ParseOCRReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseOCRReqMessage::IsInitialized() const {
  return true;
}

void ParseOCRReqMessage::InternalSwap(ParseOCRReqMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pic_path_, lhs_arena,
      &other->_impl_.pic_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pic_data_, lhs_arena,
      &other->_impl_.pic_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParseOCRReqMessage, _impl_.xx4_)
      + sizeof(ParseOCRReqMessage::_impl_.xx4_)
      - PROTOBUF_FIELD_OFFSET(ParseOCRReqMessage, _impl_.rt_)>(
          reinterpret_cast<char*>(&_impl_.rt_),
          reinterpret_cast<char*>(&other->_impl_.rt_));
}

std::string ParseOCRReqMessage::GetTypeName() const {
  return "wx4.ParseOCRReqMessage";
}


// ===================================================================

class OCRResultInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OCRResultInfo>()._impl_._has_bits_);
  static void set_has_img_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_img_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cpu_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_used(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void OCRResultInfo::clear_lines() {
  _impl_.lines_.Clear();
}
OCRResultInfo::OCRResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.OCRResultInfo)
}
OCRResultInfo::OCRResultInfo(const OCRResultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OCRResultInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.cpu_report_){}
    , decltype(_impl_.img_width_){}
    , decltype(_impl_.img_height_){}
    , decltype(_impl_.time_used_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.cpu_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpu_report()) {
    _this->_impl_.cpu_report_.Set(from._internal_cpu_report(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.img_width_, &from._impl_.img_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_used_) -
    reinterpret_cast<char*>(&_impl_.img_width_)) + sizeof(_impl_.time_used_));
  // @@protoc_insertion_point(copy_constructor:wx4.OCRResultInfo)
}

inline void OCRResultInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.cpu_report_){}
    , decltype(_impl_.img_width_){0u}
    , decltype(_impl_.img_height_){0u}
    , decltype(_impl_.time_used_){uint64_t{0u}}
  };
  _impl_.cpu_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OCRResultInfo::~OCRResultInfo() {
  // @@protoc_insertion_point(destructor:wx4.OCRResultInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OCRResultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.cpu_report_.Destroy();
}

void OCRResultInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OCRResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.OCRResultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.cpu_report_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.img_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_used_) -
        reinterpret_cast<char*>(&_impl_.img_width_)) + sizeof(_impl_.time_used_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OCRResultInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_common.OCRResultLine lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_img_width(&has_bits);
          _impl_.img_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_img_height(&has_bits);
          _impl_.img_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cpu_report = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cpu_report();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_time_used(&has_bits);
          _impl_.time_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OCRResultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.OCRResultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_common.OCRResultLine lines = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 img_width = 4;
  if (_internal_has_img_width()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_img_width(), target);
  }

  // optional uint32 img_height = 5;
  if (_internal_has_img_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_img_height(), target);
  }

  // optional string cpu_report = 6;
  if (_internal_has_cpu_report()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_report().data(), static_cast<int>(this->_internal_cpu_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wx4.OCRResultInfo.cpu_report");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cpu_report(), target);
  }

  // optional uint64 time_used = 7;
  if (_internal_has_time_used()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_time_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.OCRResultInfo)
  return target;
}

size_t OCRResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.OCRResultInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_common.OCRResultLine lines = 3;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cpu_report = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpu_report());
    }

    // optional uint32 img_width = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_width());
    }

    // optional uint32 img_height = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_height());
    }

    // optional uint64 time_used = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_used());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRResultInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OCRResultInfo*>(
      &from));
}

void OCRResultInfo::MergeFrom(const OCRResultInfo& from) {
  OCRResultInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.OCRResultInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cpu_report(from._internal_cpu_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.img_width_ = from._impl_.img_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.img_height_ = from._impl_.img_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_used_ = from._impl_.time_used_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OCRResultInfo::CopyFrom(const OCRResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.OCRResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRResultInfo::IsInitialized() const {
  return true;
}

void OCRResultInfo::InternalSwap(OCRResultInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_report_, lhs_arena,
      &other->_impl_.cpu_report_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OCRResultInfo, _impl_.time_used_)
      + sizeof(OCRResultInfo::_impl_.time_used_)
      - PROTOBUF_FIELD_OFFSET(OCRResultInfo, _impl_.img_width_)>(
          reinterpret_cast<char*>(&_impl_.img_width_),
          reinterpret_cast<char*>(&other->_impl_.img_width_));
}

std::string OCRResultInfo::GetTypeName() const {
  return "wx4.OCRResultInfo";
}


// ===================================================================

class QRResultInfo::_Internal {
 public:
};

QRResultInfo::QRResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.QRResultInfo)
}
QRResultInfo::QRResultInfo(const QRResultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  QRResultInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wx4.QRResultInfo)
}

inline void QRResultInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

QRResultInfo::~QRResultInfo() {
  // @@protoc_insertion_point(destructor:wx4.QRResultInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QRResultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QRResultInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QRResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.QRResultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* QRResultInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QRResultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.QRResultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.QRResultInfo)
  return target;
}

size_t QRResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.QRResultInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QRResultInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const QRResultInfo*>(
      &from));
}

void QRResultInfo::MergeFrom(const QRResultInfo& from) {
  QRResultInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.QRResultInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QRResultInfo::CopyFrom(const QRResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.QRResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QRResultInfo::IsInitialized() const {
  return true;
}

void QRResultInfo::InternalSwap(QRResultInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string QRResultInfo::GetTypeName() const {
  return "wx4.QRResultInfo";
}


// ===================================================================

class MMFGResultInfo::_Internal {
 public:
};

MMFGResultInfo::MMFGResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.MMFGResultInfo)
}
MMFGResultInfo::MMFGResultInfo(const MMFGResultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MMFGResultInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wx4.MMFGResultInfo)
}

inline void MMFGResultInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

MMFGResultInfo::~MMFGResultInfo() {
  // @@protoc_insertion_point(destructor:wx4.MMFGResultInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MMFGResultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MMFGResultInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MMFGResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.MMFGResultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* MMFGResultInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MMFGResultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.MMFGResultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.MMFGResultInfo)
  return target;
}

size_t MMFGResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.MMFGResultInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MMFGResultInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MMFGResultInfo*>(
      &from));
}

void MMFGResultInfo::MergeFrom(const MMFGResultInfo& from) {
  MMFGResultInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.MMFGResultInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MMFGResultInfo::CopyFrom(const MMFGResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.MMFGResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMFGResultInfo::IsInitialized() const {
  return true;
}

void MMFGResultInfo::InternalSwap(MMFGResultInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string MMFGResultInfo::GetTypeName() const {
  return "wx4.MMFGResultInfo";
}


// ===================================================================

class ParseOCRRespMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ParseOCRRespMessage>()._impl_._has_bits_);
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_err_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::wx4::OCRResultInfo& res(const ParseOCRRespMessage* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::wx4::ReqType& rt(const ParseOCRRespMessage* msg);
  static void set_has_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_qrcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmfg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::wx4::OCRResultInfo&
ParseOCRRespMessage::_Internal::res(const ParseOCRRespMessage* msg) {
  return *msg->_impl_.res_;
}
const ::wx4::ReqType&
ParseOCRRespMessage::_Internal::rt(const ParseOCRRespMessage* msg) {
  return *msg->_impl_.rt_;
}
ParseOCRRespMessage::ParseOCRRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wx4.ParseOCRRespMessage)
}
ParseOCRRespMessage::ParseOCRRespMessage(const ParseOCRRespMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ParseOCRRespMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qrcode_){}
    , decltype(_impl_.mmfg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.rt_){nullptr}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.err_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.qrcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qrcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_qrcode()) {
    _this->_impl_.qrcode_.Set(from._internal_qrcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mmfg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mmfg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mmfg()) {
    _this->_impl_.mmfg_.Set(from._internal_mmfg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_res()) {
    _this->_impl_.res_ = new ::wx4::OCRResultInfo(*from._impl_.res_);
  }
  if (from._internal_has_rt()) {
    _this->_impl_.rt_ = new ::wx4::ReqType(*from._impl_.rt_);
  }
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_code_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.err_code_));
  // @@protoc_insertion_point(copy_constructor:wx4.ParseOCRRespMessage)
}

inline void ParseOCRRespMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qrcode_){}
    , decltype(_impl_.mmfg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.rt_){nullptr}
    , decltype(_impl_.task_id_){uint64_t{0u}}
    , decltype(_impl_.err_code_){0}
  };
  _impl_.qrcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.qrcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mmfg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mmfg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParseOCRRespMessage::~ParseOCRRespMessage() {
  // @@protoc_insertion_point(destructor:wx4.ParseOCRRespMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParseOCRRespMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qrcode_.Destroy();
  _impl_.mmfg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.res_;
  if (this != internal_default_instance()) delete _impl_.rt_;
}

void ParseOCRRespMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParseOCRRespMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:wx4.ParseOCRRespMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.qrcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mmfg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.res_ != nullptr);
      _impl_.res_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rt_ != nullptr);
      _impl_.rt_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.err_code_) -
        reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.err_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ParseOCRRespMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_err_code(&has_bits);
          _impl_.err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wx4.OCRResultInfo res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wx4.ReqType rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes qrcode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_qrcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mmfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mmfg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParseOCRRespMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wx4.ParseOCRRespMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 task_id = 1;
  if (_internal_has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // optional int32 err_code = 2;
  if (_internal_has_err_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  // optional .wx4.OCRResultInfo res = 3;
  if (_internal_has_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::res(this),
        _Internal::res(this).GetCachedSize(), target, stream);
  }

  // optional .wx4.ReqType rt = 4;
  if (_internal_has_rt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rt(this),
        _Internal::rt(this).GetCachedSize(), target, stream);
  }

  // optional bytes qrcode = 5;
  if (_internal_has_qrcode()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_qrcode(), target);
  }

  // optional bytes mmfg = 6;
  if (_internal_has_mmfg()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_mmfg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wx4.ParseOCRRespMessage)
  return target;
}

size_t ParseOCRRespMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wx4.ParseOCRRespMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes qrcode = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_qrcode());
    }

    // optional bytes mmfg = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mmfg());
    }

    // optional .wx4.OCRResultInfo res = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_);
    }

    // optional .wx4.ReqType rt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rt_);
    }

    // optional uint64 task_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_task_id());
    }

    // optional int32 err_code = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParseOCRRespMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ParseOCRRespMessage*>(
      &from));
}

void ParseOCRRespMessage::MergeFrom(const ParseOCRRespMessage& from) {
  ParseOCRRespMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:wx4.ParseOCRRespMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_qrcode(from._internal_qrcode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mmfg(from._internal_mmfg());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_res()->::wx4::OCRResultInfo::MergeFrom(
          from._internal_res());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rt()->::wx4::ReqType::MergeFrom(
          from._internal_rt());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.err_code_ = from._impl_.err_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ParseOCRRespMessage::CopyFrom(const ParseOCRRespMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wx4.ParseOCRRespMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseOCRRespMessage::IsInitialized() const {
  return true;
}

void ParseOCRRespMessage::InternalSwap(ParseOCRRespMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.qrcode_, lhs_arena,
      &other->_impl_.qrcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mmfg_, lhs_arena,
      &other->_impl_.mmfg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParseOCRRespMessage, _impl_.err_code_)
      + sizeof(ParseOCRRespMessage::_impl_.err_code_)
      - PROTOBUF_FIELD_OFFSET(ParseOCRRespMessage, _impl_.res_)>(
          reinterpret_cast<char*>(&_impl_.res_),
          reinterpret_cast<char*>(&other->_impl_.res_));
}

std::string ParseOCRRespMessage::GetTypeName() const {
  return "wx4.ParseOCRRespMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wx4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wx4::OCRSupportMessage*
Arena::CreateMaybeMessage< ::wx4::OCRSupportMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::OCRSupportMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::ReqType*
Arena::CreateMaybeMessage< ::wx4::ReqType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::ReqType >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::ParseOCRReqMessage*
Arena::CreateMaybeMessage< ::wx4::ParseOCRReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::ParseOCRReqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::OCRResultInfo*
Arena::CreateMaybeMessage< ::wx4::OCRResultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::OCRResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::QRResultInfo*
Arena::CreateMaybeMessage< ::wx4::QRResultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::QRResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::MMFGResultInfo*
Arena::CreateMaybeMessage< ::wx4::MMFGResultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::MMFGResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::wx4::ParseOCRRespMessage*
Arena::CreateMaybeMessage< ::wx4::ParseOCRRespMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wx4::ParseOCRRespMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
