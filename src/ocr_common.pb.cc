// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_common.proto

#include "ocr_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ocr_common {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Box::Box(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topleft_)*/nullptr
  , /*decltype(_impl_.topright_)*/nullptr
  , /*decltype(_impl_.bottomright_)*/nullptr
  , /*decltype(_impl_.bottomleft_)*/nullptr} {}
struct BoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoxDefaultTypeInternal() {}
  union {
    Box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoxDefaultTypeInternal _Box_default_instance_;
PROTOBUF_CONSTEXPR OCRResultChar::OCRResultChar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chars_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.char_box_)*/nullptr} {}
struct OCRResultCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OCRResultCharDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OCRResultCharDefaultTypeInternal() {}
  union {
    OCRResultChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OCRResultCharDefaultTypeInternal _OCRResultChar_default_instance_;
PROTOBUF_CONSTEXPR OCRResultLine::OCRResultLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_box_)*/nullptr
  , /*decltype(_impl_.box10_)*/nullptr
  , /*decltype(_impl_.rate_)*/0
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_.bottom_)*/0
  , /*decltype(_impl_.unknown_0_)*/false} {}
struct OCRResultLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OCRResultLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OCRResultLineDefaultTypeInternal() {}
  union {
    OCRResultLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OCRResultLineDefaultTypeInternal _OCRResultLine_default_instance_;
}  // namespace ocr_common
namespace ocr_common {

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_common.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:ocr_common.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ocr_common.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_common.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_common.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_common.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_common.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Point*>(
      &from));
}

void Point::MergeFrom(const Point& from) {
  Point* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_common.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_common.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Point::GetTypeName() const {
  return "ocr_common.Point";
}


// ===================================================================

class Box::_Internal {
 public:
  using HasBits = decltype(std::declval<Box>()._impl_._has_bits_);
  static const ::ocr_common::Point& topleft(const Box* msg);
  static void set_has_topleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ocr_common::Point& topright(const Box* msg);
  static void set_has_topright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ocr_common::Point& bottomright(const Box* msg);
  static void set_has_bottomright(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ocr_common::Point& bottomleft(const Box* msg);
  static void set_has_bottomleft(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ocr_common::Point&
Box::_Internal::topleft(const Box* msg) {
  return *msg->_impl_.topleft_;
}
const ::ocr_common::Point&
Box::_Internal::topright(const Box* msg) {
  return *msg->_impl_.topright_;
}
const ::ocr_common::Point&
Box::_Internal::bottomright(const Box* msg) {
  return *msg->_impl_.bottomright_;
}
const ::ocr_common::Point&
Box::_Internal::bottomleft(const Box* msg) {
  return *msg->_impl_.bottomleft_;
}
Box::Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_common.Box)
}
Box::Box(const Box& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Box* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topleft_){nullptr}
    , decltype(_impl_.topright_){nullptr}
    , decltype(_impl_.bottomright_){nullptr}
    , decltype(_impl_.bottomleft_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_topleft()) {
    _this->_impl_.topleft_ = new ::ocr_common::Point(*from._impl_.topleft_);
  }
  if (from._internal_has_topright()) {
    _this->_impl_.topright_ = new ::ocr_common::Point(*from._impl_.topright_);
  }
  if (from._internal_has_bottomright()) {
    _this->_impl_.bottomright_ = new ::ocr_common::Point(*from._impl_.bottomright_);
  }
  if (from._internal_has_bottomleft()) {
    _this->_impl_.bottomleft_ = new ::ocr_common::Point(*from._impl_.bottomleft_);
  }
  // @@protoc_insertion_point(copy_constructor:ocr_common.Box)
}

inline void Box::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topleft_){nullptr}
    , decltype(_impl_.topright_){nullptr}
    , decltype(_impl_.bottomright_){nullptr}
    , decltype(_impl_.bottomleft_){nullptr}
  };
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:ocr_common.Box)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Box::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topleft_;
  if (this != internal_default_instance()) delete _impl_.topright_;
  if (this != internal_default_instance()) delete _impl_.bottomright_;
  if (this != internal_default_instance()) delete _impl_.bottomleft_;
}

void Box::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_common.Box)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.topleft_ != nullptr);
      _impl_.topleft_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.topright_ != nullptr);
      _impl_.topright_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.bottomright_ != nullptr);
      _impl_.bottomright_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.bottomleft_ != nullptr);
      _impl_.bottomleft_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Box::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ocr_common.Point topleft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topleft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ocr_common.Point topright = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topright(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ocr_common.Point bottomright = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottomright(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ocr_common.Point bottomleft = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottomleft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Box::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_common.Box)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ocr_common.Point topleft = 1;
  if (_internal_has_topleft()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topleft(this),
        _Internal::topleft(this).GetCachedSize(), target, stream);
  }

  // optional .ocr_common.Point topright = 2;
  if (_internal_has_topright()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topright(this),
        _Internal::topright(this).GetCachedSize(), target, stream);
  }

  // optional .ocr_common.Point bottomright = 3;
  if (_internal_has_bottomright()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bottomright(this),
        _Internal::bottomright(this).GetCachedSize(), target, stream);
  }

  // optional .ocr_common.Point bottomleft = 4;
  if (_internal_has_bottomleft()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bottomleft(this),
        _Internal::bottomleft(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_common.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_common.Box)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ocr_common.Point topleft = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topleft_);
    }

    // optional .ocr_common.Point topright = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topright_);
    }

    // optional .ocr_common.Point bottomright = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottomright_);
    }

    // optional .ocr_common.Point bottomleft = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottomleft_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Box*>(
      &from));
}

void Box::MergeFrom(const Box& from) {
  Box* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_common.Box)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_topleft()->::ocr_common::Point::MergeFrom(
          from._internal_topleft());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_topright()->::ocr_common::Point::MergeFrom(
          from._internal_topright());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_bottomright()->::ocr_common::Point::MergeFrom(
          from._internal_bottomright());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_bottomleft()->::ocr_common::Point::MergeFrom(
          from._internal_bottomleft());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_common.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  return true;
}

void Box::InternalSwap(Box* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box, _impl_.bottomleft_)
      + sizeof(Box::_impl_.bottomleft_)
      - PROTOBUF_FIELD_OFFSET(Box, _impl_.topleft_)>(
          reinterpret_cast<char*>(&_impl_.topleft_),
          reinterpret_cast<char*>(&other->_impl_.topleft_));
}

std::string Box::GetTypeName() const {
  return "ocr_common.Box";
}


// ===================================================================

class OCRResultChar::_Internal {
 public:
  using HasBits = decltype(std::declval<OCRResultChar>()._impl_._has_bits_);
  static const ::ocr_common::Box& char_box(const OCRResultChar* msg);
  static void set_has_char_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ocr_common::Box&
OCRResultChar::_Internal::char_box(const OCRResultChar* msg) {
  return *msg->_impl_.char_box_;
}
OCRResultChar::OCRResultChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_common.OCRResultChar)
}
OCRResultChar::OCRResultChar(const OCRResultChar& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OCRResultChar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chars_){}
    , decltype(_impl_.char_box_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.chars_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chars_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chars()) {
    _this->_impl_.chars_.Set(from._internal_chars(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_char_box()) {
    _this->_impl_.char_box_ = new ::ocr_common::Box(*from._impl_.char_box_);
  }
  // @@protoc_insertion_point(copy_constructor:ocr_common.OCRResultChar)
}

inline void OCRResultChar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chars_){}
    , decltype(_impl_.char_box_){nullptr}
  };
  _impl_.chars_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chars_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OCRResultChar::~OCRResultChar() {
  // @@protoc_insertion_point(destructor:ocr_common.OCRResultChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OCRResultChar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chars_.Destroy();
  if (this != internal_default_instance()) delete _impl_.char_box_;
}

void OCRResultChar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OCRResultChar::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_common.OCRResultChar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chars_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.char_box_ != nullptr);
      _impl_.char_box_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OCRResultChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ocr_common.Box char_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chars();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OCRResultChar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_common.OCRResultChar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ocr_common.Box char_box = 1;
  if (_internal_has_char_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::char_box(this),
        _Internal::char_box(this).GetCachedSize(), target, stream);
  }

  // optional string chars = 2;
  if (_internal_has_chars()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chars().data(), static_cast<int>(this->_internal_chars().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ocr_common.OCRResultChar.chars");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chars(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_common.OCRResultChar)
  return target;
}

size_t OCRResultChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_common.OCRResultChar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string chars = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chars());
    }

    // optional .ocr_common.Box char_box = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.char_box_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRResultChar::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OCRResultChar*>(
      &from));
}

void OCRResultChar::MergeFrom(const OCRResultChar& from) {
  OCRResultChar* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_common.OCRResultChar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chars(from._internal_chars());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_char_box()->::ocr_common::Box::MergeFrom(
          from._internal_char_box());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OCRResultChar::CopyFrom(const OCRResultChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_common.OCRResultChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRResultChar::IsInitialized() const {
  return true;
}

void OCRResultChar::InternalSwap(OCRResultChar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chars_, lhs_arena,
      &other->_impl_.chars_, rhs_arena
  );
  swap(_impl_.char_box_, other->_impl_.char_box_);
}

std::string OCRResultChar::GetTypeName() const {
  return "ocr_common.OCRResultChar";
}


// ===================================================================

class OCRResultLine::_Internal {
 public:
  using HasBits = decltype(std::declval<OCRResultLine>()._impl_._has_bits_);
  static const ::ocr_common::Box& line_box(const OCRResultLine* msg);
  static void set_has_unknown_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ocr_common::Box& box10(const OCRResultLine* msg);
  static void set_has_box10(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ocr_common::Box&
OCRResultLine::_Internal::line_box(const OCRResultLine* msg) {
  return *msg->_impl_.line_box_;
}
const ::ocr_common::Box&
OCRResultLine::_Internal::box10(const OCRResultLine* msg) {
  return *msg->_impl_.box10_;
}
OCRResultLine::OCRResultLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ocr_common.OCRResultLine)
}
OCRResultLine::OCRResultLine(const OCRResultLine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  OCRResultLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.text_){}
    , decltype(_impl_.line_box_){nullptr}
    , decltype(_impl_.box10_){nullptr}
    , decltype(_impl_.rate_){}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.right_){}
    , decltype(_impl_.bottom_){}
    , decltype(_impl_.unknown_0_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_line_box()) {
    _this->_impl_.line_box_ = new ::ocr_common::Box(*from._impl_.line_box_);
  }
  if (from._internal_has_box10()) {
    _this->_impl_.box10_ = new ::ocr_common::Box(*from._impl_.box10_);
  }
  ::memcpy(&_impl_.rate_, &from._impl_.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknown_0_) -
    reinterpret_cast<char*>(&_impl_.rate_)) + sizeof(_impl_.unknown_0_));
  // @@protoc_insertion_point(copy_constructor:ocr_common.OCRResultLine)
}

inline void OCRResultLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blocks_){arena}
    , decltype(_impl_.text_){}
    , decltype(_impl_.line_box_){nullptr}
    , decltype(_impl_.box10_){nullptr}
    , decltype(_impl_.rate_){0}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , decltype(_impl_.right_){0}
    , decltype(_impl_.bottom_){0}
    , decltype(_impl_.unknown_0_){false}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OCRResultLine::~OCRResultLine() {
  // @@protoc_insertion_point(destructor:ocr_common.OCRResultLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OCRResultLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.line_box_;
  if (this != internal_default_instance()) delete _impl_.box10_;
}

void OCRResultLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OCRResultLine::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_common.OCRResultLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.line_box_ != nullptr) {
    delete _impl_.line_box_;
  }
  _impl_.line_box_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.box10_ != nullptr);
    _impl_.box10_->Clear();
  }
  ::memset(&_impl_.rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bottom_) -
      reinterpret_cast<char*>(&_impl_.rate_)) + sizeof(_impl_.bottom_));
  _impl_.unknown_0_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OCRResultLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ocr_common.Box line_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // float rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .ocr_common.OCRResultChar blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bottom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool unknown_0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_unknown_0(&has_bits);
          _impl_.unknown_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ocr_common.Box box10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_box10(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OCRResultLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_common.OCRResultLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_common.Box line_box = 1;
  if (this->_internal_has_line_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::line_box(this),
        _Internal::line_box(this).GetCachedSize(), target, stream);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ocr_common.OCRResultLine.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // float rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_rate(), target);
  }

  // repeated .ocr_common.OCRResultChar blocks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float left = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_left(), target);
  }

  // float top = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = this->_internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_top(), target);
  }

  // float right = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_right(), target);
  }

  // float bottom = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = this->_internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bottom(), target);
  }

  // optional bool unknown_0 = 9;
  if (_internal_has_unknown_0()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_unknown_0(), target);
  }

  // optional .ocr_common.Box box10 = 10;
  if (_internal_has_box10()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::box10(this),
        _Internal::box10(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_common.OCRResultLine)
  return target;
}

size_t OCRResultLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_common.OCRResultLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_common.OCRResultChar blocks = 4;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ocr_common.Box line_box = 1;
  if (this->_internal_has_line_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.line_box_);
  }

  // optional .ocr_common.Box box10 = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.box10_);
  }

  // float rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 1 + 4;
  }

  // float left = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = this->_internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    total_size += 1 + 4;
  }

  // float top = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = this->_internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    total_size += 1 + 4;
  }

  // float right = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = this->_internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    total_size += 1 + 4;
  }

  // float bottom = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = this->_internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    total_size += 1 + 4;
  }

  // optional bool unknown_0 = 9;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRResultLine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OCRResultLine*>(
      &from));
}

void OCRResultLine::MergeFrom(const OCRResultLine& from) {
  OCRResultLine* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ocr_common.OCRResultLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_line_box()) {
    _this->_internal_mutable_line_box()->::ocr_common::Box::MergeFrom(
        from._internal_line_box());
  }
  if (from._internal_has_box10()) {
    _this->_internal_mutable_box10()->::ocr_common::Box::MergeFrom(
        from._internal_box10());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_left = from._internal_left();
  uint32_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_top = from._internal_top();
  uint32_t raw_top;
  memcpy(&raw_top, &tmp_top, sizeof(tmp_top));
  if (raw_top != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_right = from._internal_right();
  uint32_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bottom = from._internal_bottom();
  uint32_t raw_bottom;
  memcpy(&raw_bottom, &tmp_bottom, sizeof(tmp_bottom));
  if (raw_bottom != 0) {
    _this->_internal_set_bottom(from._internal_bottom());
  }
  if (from._internal_has_unknown_0()) {
    _this->_internal_set_unknown_0(from._internal_unknown_0());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OCRResultLine::CopyFrom(const OCRResultLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_common.OCRResultLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRResultLine::IsInitialized() const {
  return true;
}

void OCRResultLine::InternalSwap(OCRResultLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OCRResultLine, _impl_.unknown_0_)
      + sizeof(OCRResultLine::_impl_.unknown_0_)
      - PROTOBUF_FIELD_OFFSET(OCRResultLine, _impl_.line_box_)>(
          reinterpret_cast<char*>(&_impl_.line_box_),
          reinterpret_cast<char*>(&other->_impl_.line_box_));
}

std::string OCRResultLine::GetTypeName() const {
  return "ocr_common.OCRResultLine";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ocr_common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ocr_common::Point*
Arena::CreateMaybeMessage< ::ocr_common::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_common::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_common::Box*
Arena::CreateMaybeMessage< ::ocr_common::Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_common::Box >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_common::OCRResultChar*
Arena::CreateMaybeMessage< ::ocr_common::OCRResultChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_common::OCRResultChar >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_common::OCRResultLine*
Arena::CreateMaybeMessage< ::ocr_common::OCRResultLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_common::OCRResultLine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
