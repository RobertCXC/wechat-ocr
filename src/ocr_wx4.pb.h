// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_wx4.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx4_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx4_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ocr_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ocr_5fwx4_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ocr_5fwx4_2eproto {
  static const uint32_t offsets[];
};
namespace wx4 {
class MMFGResultInfo;
struct MMFGResultInfoDefaultTypeInternal;
extern MMFGResultInfoDefaultTypeInternal _MMFGResultInfo_default_instance_;
class OCRResultInfo;
struct OCRResultInfoDefaultTypeInternal;
extern OCRResultInfoDefaultTypeInternal _OCRResultInfo_default_instance_;
class OCRSupportMessage;
struct OCRSupportMessageDefaultTypeInternal;
extern OCRSupportMessageDefaultTypeInternal _OCRSupportMessage_default_instance_;
class ParseOCRReqMessage;
struct ParseOCRReqMessageDefaultTypeInternal;
extern ParseOCRReqMessageDefaultTypeInternal _ParseOCRReqMessage_default_instance_;
class ParseOCRRespMessage;
struct ParseOCRRespMessageDefaultTypeInternal;
extern ParseOCRRespMessageDefaultTypeInternal _ParseOCRRespMessage_default_instance_;
class QRResultInfo;
struct QRResultInfoDefaultTypeInternal;
extern QRResultInfoDefaultTypeInternal _QRResultInfo_default_instance_;
class ReqType;
struct ReqTypeDefaultTypeInternal;
extern ReqTypeDefaultTypeInternal _ReqType_default_instance_;
}  // namespace wx4
PROTOBUF_NAMESPACE_OPEN
template<> ::wx4::MMFGResultInfo* Arena::CreateMaybeMessage<::wx4::MMFGResultInfo>(Arena*);
template<> ::wx4::OCRResultInfo* Arena::CreateMaybeMessage<::wx4::OCRResultInfo>(Arena*);
template<> ::wx4::OCRSupportMessage* Arena::CreateMaybeMessage<::wx4::OCRSupportMessage>(Arena*);
template<> ::wx4::ParseOCRReqMessage* Arena::CreateMaybeMessage<::wx4::ParseOCRReqMessage>(Arena*);
template<> ::wx4::ParseOCRRespMessage* Arena::CreateMaybeMessage<::wx4::ParseOCRRespMessage>(Arena*);
template<> ::wx4::QRResultInfo* Arena::CreateMaybeMessage<::wx4::QRResultInfo>(Arena*);
template<> ::wx4::ReqType* Arena::CreateMaybeMessage<::wx4::ReqType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wx4 {

// ===================================================================

class OCRSupportMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.OCRSupportMessage) */ {
 public:
  inline OCRSupportMessage() : OCRSupportMessage(nullptr) {}
  ~OCRSupportMessage() override;
  explicit PROTOBUF_CONSTEXPR OCRSupportMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRSupportMessage(const OCRSupportMessage& from);
  OCRSupportMessage(OCRSupportMessage&& from) noexcept
    : OCRSupportMessage() {
    *this = ::std::move(from);
  }

  inline OCRSupportMessage& operator=(const OCRSupportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRSupportMessage& operator=(OCRSupportMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OCRSupportMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRSupportMessage* internal_default_instance() {
    return reinterpret_cast<const OCRSupportMessage*>(
               &_OCRSupportMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OCRSupportMessage& a, OCRSupportMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRSupportMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRSupportMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRSupportMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRSupportMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OCRSupportMessage& from);
  void MergeFrom(const OCRSupportMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OCRSupportMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.OCRSupportMessage";
  }
  protected:
  explicit OCRSupportMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedFieldNumber = 1,
  };
  // optional bool supported = 1;
  bool has_supported() const;
  private:
  bool _internal_has_supported() const;
  public:
  void clear_supported();
  bool supported() const;
  void set_supported(bool value);
  private:
  bool _internal_supported() const;
  void _internal_set_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wx4.OCRSupportMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool supported_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class ReqType final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.ReqType) */ {
 public:
  inline ReqType() : ReqType(nullptr) {}
  ~ReqType() override;
  explicit PROTOBUF_CONSTEXPR ReqType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqType(const ReqType& from);
  ReqType(ReqType&& from) noexcept
    : ReqType() {
    *this = ::std::move(from);
  }

  inline ReqType& operator=(const ReqType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqType& operator=(ReqType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ReqType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqType* internal_default_instance() {
    return reinterpret_cast<const ReqType*>(
               &_ReqType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqType& a, ReqType& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ReqType& from);
  void MergeFrom(const ReqType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.ReqType";
  }
  protected:
  explicit ReqType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
    kT2FieldNumber = 2,
    kT3FieldNumber = 3,
  };
  // optional bool t1 = 1;
  bool has_t1() const;
  private:
  bool _internal_has_t1() const;
  public:
  void clear_t1();
  bool t1() const;
  void set_t1(bool value);
  private:
  bool _internal_t1() const;
  void _internal_set_t1(bool value);
  public:

  // optional bool t2 = 2;
  bool has_t2() const;
  private:
  bool _internal_has_t2() const;
  public:
  void clear_t2();
  bool t2() const;
  void set_t2(bool value);
  private:
  bool _internal_t2() const;
  void _internal_set_t2(bool value);
  public:

  // optional bool t3 = 3;
  bool has_t3() const;
  private:
  bool _internal_has_t3() const;
  public:
  void clear_t3();
  bool t3() const;
  void set_t3(bool value);
  private:
  bool _internal_t3() const;
  void _internal_set_t3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wx4.ReqType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool t1_;
    bool t2_;
    bool t3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class ParseOCRReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.ParseOCRReqMessage) */ {
 public:
  inline ParseOCRReqMessage() : ParseOCRReqMessage(nullptr) {}
  ~ParseOCRReqMessage() override;
  explicit PROTOBUF_CONSTEXPR ParseOCRReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParseOCRReqMessage(const ParseOCRReqMessage& from);
  ParseOCRReqMessage(ParseOCRReqMessage&& from) noexcept
    : ParseOCRReqMessage() {
    *this = ::std::move(from);
  }

  inline ParseOCRReqMessage& operator=(const ParseOCRReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParseOCRReqMessage& operator=(ParseOCRReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParseOCRReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParseOCRReqMessage* internal_default_instance() {
    return reinterpret_cast<const ParseOCRReqMessage*>(
               &_ParseOCRReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParseOCRReqMessage& a, ParseOCRReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ParseOCRReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParseOCRReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParseOCRReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParseOCRReqMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ParseOCRReqMessage& from);
  void MergeFrom(const ParseOCRReqMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParseOCRReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.ParseOCRReqMessage";
  }
  protected:
  explicit ParseOCRReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicPathFieldNumber = 2,
    kPicDataFieldNumber = 5,
    kRtFieldNumber = 6,
    kTaskIdFieldNumber = 1,
    kXx3FieldNumber = 3,
    kXx4FieldNumber = 4,
  };
  // optional string pic_path = 2;
  bool has_pic_path() const;
  private:
  bool _internal_has_pic_path() const;
  public:
  void clear_pic_path();
  const std::string& pic_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_path();
  PROTOBUF_NODISCARD std::string* release_pic_path();
  void set_allocated_pic_path(std::string* pic_path);
  private:
  const std::string& _internal_pic_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_path(const std::string& value);
  std::string* _internal_mutable_pic_path();
  public:

  // optional bytes pic_data = 5;
  bool has_pic_data() const;
  private:
  bool _internal_has_pic_data() const;
  public:
  void clear_pic_data();
  const std::string& pic_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_data();
  PROTOBUF_NODISCARD std::string* release_pic_data();
  void set_allocated_pic_data(std::string* pic_data);
  private:
  const std::string& _internal_pic_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_data(const std::string& value);
  std::string* _internal_mutable_pic_data();
  public:

  // optional .wx4.ReqType rt = 6;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const ::wx4::ReqType& rt() const;
  PROTOBUF_NODISCARD ::wx4::ReqType* release_rt();
  ::wx4::ReqType* mutable_rt();
  void set_allocated_rt(::wx4::ReqType* rt);
  private:
  const ::wx4::ReqType& _internal_rt() const;
  ::wx4::ReqType* _internal_mutable_rt();
  public:
  void unsafe_arena_set_allocated_rt(
      ::wx4::ReqType* rt);
  ::wx4::ReqType* unsafe_arena_release_rt();

  // optional uint64 task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // optional uint32 xx3 = 3;
  bool has_xx3() const;
  private:
  bool _internal_has_xx3() const;
  public:
  void clear_xx3();
  uint32_t xx3() const;
  void set_xx3(uint32_t value);
  private:
  uint32_t _internal_xx3() const;
  void _internal_set_xx3(uint32_t value);
  public:

  // optional uint32 xx4 = 4;
  bool has_xx4() const;
  private:
  bool _internal_has_xx4() const;
  public:
  void clear_xx4();
  uint32_t xx4() const;
  void set_xx4(uint32_t value);
  private:
  uint32_t _internal_xx4() const;
  void _internal_set_xx4(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx4.ParseOCRReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_data_;
    ::wx4::ReqType* rt_;
    uint64_t task_id_;
    uint32_t xx3_;
    uint32_t xx4_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class OCRResultInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.OCRResultInfo) */ {
 public:
  inline OCRResultInfo() : OCRResultInfo(nullptr) {}
  ~OCRResultInfo() override;
  explicit PROTOBUF_CONSTEXPR OCRResultInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRResultInfo(const OCRResultInfo& from);
  OCRResultInfo(OCRResultInfo&& from) noexcept
    : OCRResultInfo() {
    *this = ::std::move(from);
  }

  inline OCRResultInfo& operator=(const OCRResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRResultInfo& operator=(OCRResultInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OCRResultInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRResultInfo* internal_default_instance() {
    return reinterpret_cast<const OCRResultInfo*>(
               &_OCRResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OCRResultInfo& a, OCRResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRResultInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRResultInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OCRResultInfo& from);
  void MergeFrom(const OCRResultInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OCRResultInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.OCRResultInfo";
  }
  protected:
  explicit OCRResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 3,
    kCpuReportFieldNumber = 6,
    kImgWidthFieldNumber = 4,
    kImgHeightFieldNumber = 5,
    kTimeUsedFieldNumber = 7,
  };
  // repeated .ocr_common.OCRResultLine lines = 3;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::ocr_common::OCRResultLine* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >*
      mutable_lines();
  private:
  const ::ocr_common::OCRResultLine& _internal_lines(int index) const;
  ::ocr_common::OCRResultLine* _internal_add_lines();
  public:
  const ::ocr_common::OCRResultLine& lines(int index) const;
  ::ocr_common::OCRResultLine* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >&
      lines() const;

  // optional string cpu_report = 6;
  bool has_cpu_report() const;
  private:
  bool _internal_has_cpu_report() const;
  public:
  void clear_cpu_report();
  const std::string& cpu_report() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_report(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_report();
  PROTOBUF_NODISCARD std::string* release_cpu_report();
  void set_allocated_cpu_report(std::string* cpu_report);
  private:
  const std::string& _internal_cpu_report() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_report(const std::string& value);
  std::string* _internal_mutable_cpu_report();
  public:

  // optional uint32 img_width = 4;
  bool has_img_width() const;
  private:
  bool _internal_has_img_width() const;
  public:
  void clear_img_width();
  uint32_t img_width() const;
  void set_img_width(uint32_t value);
  private:
  uint32_t _internal_img_width() const;
  void _internal_set_img_width(uint32_t value);
  public:

  // optional uint32 img_height = 5;
  bool has_img_height() const;
  private:
  bool _internal_has_img_height() const;
  public:
  void clear_img_height();
  uint32_t img_height() const;
  void set_img_height(uint32_t value);
  private:
  uint32_t _internal_img_height() const;
  void _internal_set_img_height(uint32_t value);
  public:

  // optional uint64 time_used = 7;
  bool has_time_used() const;
  private:
  bool _internal_has_time_used() const;
  public:
  void clear_time_used();
  uint64_t time_used() const;
  void set_time_used(uint64_t value);
  private:
  uint64_t _internal_time_used() const;
  void _internal_set_time_used(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx4.OCRResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine > lines_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_report_;
    uint32_t img_width_;
    uint32_t img_height_;
    uint64_t time_used_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class QRResultInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.QRResultInfo) */ {
 public:
  inline QRResultInfo() : QRResultInfo(nullptr) {}
  ~QRResultInfo() override;
  explicit PROTOBUF_CONSTEXPR QRResultInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QRResultInfo(const QRResultInfo& from);
  QRResultInfo(QRResultInfo&& from) noexcept
    : QRResultInfo() {
    *this = ::std::move(from);
  }

  inline QRResultInfo& operator=(const QRResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QRResultInfo& operator=(QRResultInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QRResultInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const QRResultInfo* internal_default_instance() {
    return reinterpret_cast<const QRResultInfo*>(
               &_QRResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QRResultInfo& a, QRResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QRResultInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QRResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QRResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QRResultInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QRResultInfo& from);
  void MergeFrom(const QRResultInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QRResultInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.QRResultInfo";
  }
  protected:
  explicit QRResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wx4.QRResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class MMFGResultInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.MMFGResultInfo) */ {
 public:
  inline MMFGResultInfo() : MMFGResultInfo(nullptr) {}
  ~MMFGResultInfo() override;
  explicit PROTOBUF_CONSTEXPR MMFGResultInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MMFGResultInfo(const MMFGResultInfo& from);
  MMFGResultInfo(MMFGResultInfo&& from) noexcept
    : MMFGResultInfo() {
    *this = ::std::move(from);
  }

  inline MMFGResultInfo& operator=(const MMFGResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MMFGResultInfo& operator=(MMFGResultInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MMFGResultInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MMFGResultInfo* internal_default_instance() {
    return reinterpret_cast<const MMFGResultInfo*>(
               &_MMFGResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MMFGResultInfo& a, MMFGResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MMFGResultInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MMFGResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MMFGResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MMFGResultInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MMFGResultInfo& from);
  void MergeFrom(const MMFGResultInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MMFGResultInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.MMFGResultInfo";
  }
  protected:
  explicit MMFGResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wx4.MMFGResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// -------------------------------------------------------------------

class ParseOCRRespMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:wx4.ParseOCRRespMessage) */ {
 public:
  inline ParseOCRRespMessage() : ParseOCRRespMessage(nullptr) {}
  ~ParseOCRRespMessage() override;
  explicit PROTOBUF_CONSTEXPR ParseOCRRespMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParseOCRRespMessage(const ParseOCRRespMessage& from);
  ParseOCRRespMessage(ParseOCRRespMessage&& from) noexcept
    : ParseOCRRespMessage() {
    *this = ::std::move(from);
  }

  inline ParseOCRRespMessage& operator=(const ParseOCRRespMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParseOCRRespMessage& operator=(ParseOCRRespMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ParseOCRRespMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParseOCRRespMessage* internal_default_instance() {
    return reinterpret_cast<const ParseOCRRespMessage*>(
               &_ParseOCRRespMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParseOCRRespMessage& a, ParseOCRRespMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ParseOCRRespMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParseOCRRespMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParseOCRRespMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParseOCRRespMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ParseOCRRespMessage& from);
  void MergeFrom(const ParseOCRRespMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParseOCRRespMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx4.ParseOCRRespMessage";
  }
  protected:
  explicit ParseOCRRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQrcodeFieldNumber = 5,
    kMmfgFieldNumber = 6,
    kResFieldNumber = 3,
    kRtFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // optional bytes qrcode = 5;
  bool has_qrcode() const;
  private:
  bool _internal_has_qrcode() const;
  public:
  void clear_qrcode();
  const std::string& qrcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_qrcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_qrcode();
  PROTOBUF_NODISCARD std::string* release_qrcode();
  void set_allocated_qrcode(std::string* qrcode);
  private:
  const std::string& _internal_qrcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_qrcode(const std::string& value);
  std::string* _internal_mutable_qrcode();
  public:

  // optional bytes mmfg = 6;
  bool has_mmfg() const;
  private:
  bool _internal_has_mmfg() const;
  public:
  void clear_mmfg();
  const std::string& mmfg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mmfg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mmfg();
  PROTOBUF_NODISCARD std::string* release_mmfg();
  void set_allocated_mmfg(std::string* mmfg);
  private:
  const std::string& _internal_mmfg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mmfg(const std::string& value);
  std::string* _internal_mutable_mmfg();
  public:

  // optional .wx4.OCRResultInfo res = 3;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::wx4::OCRResultInfo& res() const;
  PROTOBUF_NODISCARD ::wx4::OCRResultInfo* release_res();
  ::wx4::OCRResultInfo* mutable_res();
  void set_allocated_res(::wx4::OCRResultInfo* res);
  private:
  const ::wx4::OCRResultInfo& _internal_res() const;
  ::wx4::OCRResultInfo* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::wx4::OCRResultInfo* res);
  ::wx4::OCRResultInfo* unsafe_arena_release_res();

  // optional .wx4.ReqType rt = 4;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const ::wx4::ReqType& rt() const;
  PROTOBUF_NODISCARD ::wx4::ReqType* release_rt();
  ::wx4::ReqType* mutable_rt();
  void set_allocated_rt(::wx4::ReqType* rt);
  private:
  const ::wx4::ReqType& _internal_rt() const;
  ::wx4::ReqType* _internal_mutable_rt();
  public:
  void unsafe_arena_set_allocated_rt(
      ::wx4::ReqType* rt);
  ::wx4::ReqType* unsafe_arena_release_rt();

  // optional uint64 task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  uint64_t task_id() const;
  void set_task_id(uint64_t value);
  private:
  uint64_t _internal_task_id() const;
  void _internal_set_task_id(uint64_t value);
  public:

  // optional int32 err_code = 2;
  bool has_err_code() const;
  private:
  bool _internal_has_err_code() const;
  public:
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wx4.ParseOCRRespMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qrcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmfg_;
    ::wx4::OCRResultInfo* res_;
    ::wx4::ReqType* rt_;
    uint64_t task_id_;
    int32_t err_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ocr_5fwx4_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OCRSupportMessage

// optional bool supported = 1;
inline bool OCRSupportMessage::_internal_has_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OCRSupportMessage::has_supported() const {
  return _internal_has_supported();
}
inline void OCRSupportMessage::clear_supported() {
  _impl_.supported_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool OCRSupportMessage::_internal_supported() const {
  return _impl_.supported_;
}
inline bool OCRSupportMessage::supported() const {
  // @@protoc_insertion_point(field_get:wx4.OCRSupportMessage.supported)
  return _internal_supported();
}
inline void OCRSupportMessage::_internal_set_supported(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.supported_ = value;
}
inline void OCRSupportMessage::set_supported(bool value) {
  _internal_set_supported(value);
  // @@protoc_insertion_point(field_set:wx4.OCRSupportMessage.supported)
}

// -------------------------------------------------------------------

// ReqType

// optional bool t1 = 1;
inline bool ReqType::_internal_has_t1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReqType::has_t1() const {
  return _internal_has_t1();
}
inline void ReqType::clear_t1() {
  _impl_.t1_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ReqType::_internal_t1() const {
  return _impl_.t1_;
}
inline bool ReqType::t1() const {
  // @@protoc_insertion_point(field_get:wx4.ReqType.t1)
  return _internal_t1();
}
inline void ReqType::_internal_set_t1(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.t1_ = value;
}
inline void ReqType::set_t1(bool value) {
  _internal_set_t1(value);
  // @@protoc_insertion_point(field_set:wx4.ReqType.t1)
}

// optional bool t2 = 2;
inline bool ReqType::_internal_has_t2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReqType::has_t2() const {
  return _internal_has_t2();
}
inline void ReqType::clear_t2() {
  _impl_.t2_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ReqType::_internal_t2() const {
  return _impl_.t2_;
}
inline bool ReqType::t2() const {
  // @@protoc_insertion_point(field_get:wx4.ReqType.t2)
  return _internal_t2();
}
inline void ReqType::_internal_set_t2(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.t2_ = value;
}
inline void ReqType::set_t2(bool value) {
  _internal_set_t2(value);
  // @@protoc_insertion_point(field_set:wx4.ReqType.t2)
}

// optional bool t3 = 3;
inline bool ReqType::_internal_has_t3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReqType::has_t3() const {
  return _internal_has_t3();
}
inline void ReqType::clear_t3() {
  _impl_.t3_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ReqType::_internal_t3() const {
  return _impl_.t3_;
}
inline bool ReqType::t3() const {
  // @@protoc_insertion_point(field_get:wx4.ReqType.t3)
  return _internal_t3();
}
inline void ReqType::_internal_set_t3(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.t3_ = value;
}
inline void ReqType::set_t3(bool value) {
  _internal_set_t3(value);
  // @@protoc_insertion_point(field_set:wx4.ReqType.t3)
}

// -------------------------------------------------------------------

// ParseOCRReqMessage

// optional uint64 task_id = 1;
inline bool ParseOCRReqMessage::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParseOCRReqMessage::has_task_id() const {
  return _internal_has_task_id();
}
inline void ParseOCRReqMessage::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ParseOCRReqMessage::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t ParseOCRReqMessage::task_id() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.task_id)
  return _internal_task_id();
}
inline void ParseOCRReqMessage::_internal_set_task_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.task_id_ = value;
}
inline void ParseOCRReqMessage::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:wx4.ParseOCRReqMessage.task_id)
}

// optional string pic_path = 2;
inline bool ParseOCRReqMessage::_internal_has_pic_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParseOCRReqMessage::has_pic_path() const {
  return _internal_has_pic_path();
}
inline void ParseOCRReqMessage::clear_pic_path() {
  _impl_.pic_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParseOCRReqMessage::pic_path() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.pic_path)
  return _internal_pic_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParseOCRReqMessage::set_pic_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pic_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx4.ParseOCRReqMessage.pic_path)
}
inline std::string* ParseOCRReqMessage::mutable_pic_path() {
  std::string* _s = _internal_mutable_pic_path();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRReqMessage.pic_path)
  return _s;
}
inline const std::string& ParseOCRReqMessage::_internal_pic_path() const {
  return _impl_.pic_path_.Get();
}
inline void ParseOCRReqMessage::_internal_set_pic_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pic_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ParseOCRReqMessage::_internal_mutable_pic_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pic_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ParseOCRReqMessage::release_pic_path() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRReqMessage.pic_path)
  if (!_internal_has_pic_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pic_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParseOCRReqMessage::set_allocated_pic_path(std::string* pic_path) {
  if (pic_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pic_path_.SetAllocated(pic_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_path_.IsDefault()) {
    _impl_.pic_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRReqMessage.pic_path)
}

// optional uint32 xx3 = 3;
inline bool ParseOCRReqMessage::_internal_has_xx3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParseOCRReqMessage::has_xx3() const {
  return _internal_has_xx3();
}
inline void ParseOCRReqMessage::clear_xx3() {
  _impl_.xx3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ParseOCRReqMessage::_internal_xx3() const {
  return _impl_.xx3_;
}
inline uint32_t ParseOCRReqMessage::xx3() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.xx3)
  return _internal_xx3();
}
inline void ParseOCRReqMessage::_internal_set_xx3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.xx3_ = value;
}
inline void ParseOCRReqMessage::set_xx3(uint32_t value) {
  _internal_set_xx3(value);
  // @@protoc_insertion_point(field_set:wx4.ParseOCRReqMessage.xx3)
}

// optional uint32 xx4 = 4;
inline bool ParseOCRReqMessage::_internal_has_xx4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParseOCRReqMessage::has_xx4() const {
  return _internal_has_xx4();
}
inline void ParseOCRReqMessage::clear_xx4() {
  _impl_.xx4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ParseOCRReqMessage::_internal_xx4() const {
  return _impl_.xx4_;
}
inline uint32_t ParseOCRReqMessage::xx4() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.xx4)
  return _internal_xx4();
}
inline void ParseOCRReqMessage::_internal_set_xx4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.xx4_ = value;
}
inline void ParseOCRReqMessage::set_xx4(uint32_t value) {
  _internal_set_xx4(value);
  // @@protoc_insertion_point(field_set:wx4.ParseOCRReqMessage.xx4)
}

// optional bytes pic_data = 5;
inline bool ParseOCRReqMessage::_internal_has_pic_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParseOCRReqMessage::has_pic_data() const {
  return _internal_has_pic_data();
}
inline void ParseOCRReqMessage::clear_pic_data() {
  _impl_.pic_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParseOCRReqMessage::pic_data() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.pic_data)
  return _internal_pic_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParseOCRReqMessage::set_pic_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pic_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx4.ParseOCRReqMessage.pic_data)
}
inline std::string* ParseOCRReqMessage::mutable_pic_data() {
  std::string* _s = _internal_mutable_pic_data();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRReqMessage.pic_data)
  return _s;
}
inline const std::string& ParseOCRReqMessage::_internal_pic_data() const {
  return _impl_.pic_data_.Get();
}
inline void ParseOCRReqMessage::_internal_set_pic_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pic_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ParseOCRReqMessage::_internal_mutable_pic_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pic_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ParseOCRReqMessage::release_pic_data() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRReqMessage.pic_data)
  if (!_internal_has_pic_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pic_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParseOCRReqMessage::set_allocated_pic_data(std::string* pic_data) {
  if (pic_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pic_data_.SetAllocated(pic_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_data_.IsDefault()) {
    _impl_.pic_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRReqMessage.pic_data)
}

// optional .wx4.ReqType rt = 6;
inline bool ParseOCRReqMessage::_internal_has_rt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rt_ != nullptr);
  return value;
}
inline bool ParseOCRReqMessage::has_rt() const {
  return _internal_has_rt();
}
inline void ParseOCRReqMessage::clear_rt() {
  if (_impl_.rt_ != nullptr) _impl_.rt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::wx4::ReqType& ParseOCRReqMessage::_internal_rt() const {
  const ::wx4::ReqType* p = _impl_.rt_;
  return p != nullptr ? *p : reinterpret_cast<const ::wx4::ReqType&>(
      ::wx4::_ReqType_default_instance_);
}
inline const ::wx4::ReqType& ParseOCRReqMessage::rt() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRReqMessage.rt)
  return _internal_rt();
}
inline void ParseOCRReqMessage::unsafe_arena_set_allocated_rt(
    ::wx4::ReqType* rt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rt_);
  }
  _impl_.rt_ = rt;
  if (rt) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wx4.ParseOCRReqMessage.rt)
}
inline ::wx4::ReqType* ParseOCRReqMessage::release_rt() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wx4::ReqType* temp = _impl_.rt_;
  _impl_.rt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wx4::ReqType* ParseOCRReqMessage::unsafe_arena_release_rt() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRReqMessage.rt)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wx4::ReqType* temp = _impl_.rt_;
  _impl_.rt_ = nullptr;
  return temp;
}
inline ::wx4::ReqType* ParseOCRReqMessage::_internal_mutable_rt() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::wx4::ReqType>(GetArenaForAllocation());
    _impl_.rt_ = p;
  }
  return _impl_.rt_;
}
inline ::wx4::ReqType* ParseOCRReqMessage::mutable_rt() {
  ::wx4::ReqType* _msg = _internal_mutable_rt();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRReqMessage.rt)
  return _msg;
}
inline void ParseOCRReqMessage::set_allocated_rt(::wx4::ReqType* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rt_;
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rt);
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRReqMessage.rt)
}

// -------------------------------------------------------------------

// OCRResultInfo

// repeated .ocr_common.OCRResultLine lines = 3;
inline int OCRResultInfo::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int OCRResultInfo::lines_size() const {
  return _internal_lines_size();
}
inline ::ocr_common::OCRResultLine* OCRResultInfo::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:wx4.OCRResultInfo.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >*
OCRResultInfo::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:wx4.OCRResultInfo.lines)
  return &_impl_.lines_;
}
inline const ::ocr_common::OCRResultLine& OCRResultInfo::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::ocr_common::OCRResultLine& OCRResultInfo::lines(int index) const {
  // @@protoc_insertion_point(field_get:wx4.OCRResultInfo.lines)
  return _internal_lines(index);
}
inline ::ocr_common::OCRResultLine* OCRResultInfo::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::ocr_common::OCRResultLine* OCRResultInfo::add_lines() {
  ::ocr_common::OCRResultLine* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:wx4.OCRResultInfo.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ocr_common::OCRResultLine >&
OCRResultInfo::lines() const {
  // @@protoc_insertion_point(field_list:wx4.OCRResultInfo.lines)
  return _impl_.lines_;
}

// optional uint32 img_width = 4;
inline bool OCRResultInfo::_internal_has_img_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OCRResultInfo::has_img_width() const {
  return _internal_has_img_width();
}
inline void OCRResultInfo::clear_img_width() {
  _impl_.img_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t OCRResultInfo::_internal_img_width() const {
  return _impl_.img_width_;
}
inline uint32_t OCRResultInfo::img_width() const {
  // @@protoc_insertion_point(field_get:wx4.OCRResultInfo.img_width)
  return _internal_img_width();
}
inline void OCRResultInfo::_internal_set_img_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.img_width_ = value;
}
inline void OCRResultInfo::set_img_width(uint32_t value) {
  _internal_set_img_width(value);
  // @@protoc_insertion_point(field_set:wx4.OCRResultInfo.img_width)
}

// optional uint32 img_height = 5;
inline bool OCRResultInfo::_internal_has_img_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OCRResultInfo::has_img_height() const {
  return _internal_has_img_height();
}
inline void OCRResultInfo::clear_img_height() {
  _impl_.img_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t OCRResultInfo::_internal_img_height() const {
  return _impl_.img_height_;
}
inline uint32_t OCRResultInfo::img_height() const {
  // @@protoc_insertion_point(field_get:wx4.OCRResultInfo.img_height)
  return _internal_img_height();
}
inline void OCRResultInfo::_internal_set_img_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.img_height_ = value;
}
inline void OCRResultInfo::set_img_height(uint32_t value) {
  _internal_set_img_height(value);
  // @@protoc_insertion_point(field_set:wx4.OCRResultInfo.img_height)
}

// optional string cpu_report = 6;
inline bool OCRResultInfo::_internal_has_cpu_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OCRResultInfo::has_cpu_report() const {
  return _internal_has_cpu_report();
}
inline void OCRResultInfo::clear_cpu_report() {
  _impl_.cpu_report_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OCRResultInfo::cpu_report() const {
  // @@protoc_insertion_point(field_get:wx4.OCRResultInfo.cpu_report)
  return _internal_cpu_report();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRResultInfo::set_cpu_report(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cpu_report_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx4.OCRResultInfo.cpu_report)
}
inline std::string* OCRResultInfo::mutable_cpu_report() {
  std::string* _s = _internal_mutable_cpu_report();
  // @@protoc_insertion_point(field_mutable:wx4.OCRResultInfo.cpu_report)
  return _s;
}
inline const std::string& OCRResultInfo::_internal_cpu_report() const {
  return _impl_.cpu_report_.Get();
}
inline void OCRResultInfo::_internal_set_cpu_report(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpu_report_.Set(value, GetArenaForAllocation());
}
inline std::string* OCRResultInfo::_internal_mutable_cpu_report() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cpu_report_.Mutable(GetArenaForAllocation());
}
inline std::string* OCRResultInfo::release_cpu_report() {
  // @@protoc_insertion_point(field_release:wx4.OCRResultInfo.cpu_report)
  if (!_internal_has_cpu_report()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cpu_report_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_report_.IsDefault()) {
    _impl_.cpu_report_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OCRResultInfo::set_allocated_cpu_report(std::string* cpu_report) {
  if (cpu_report != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cpu_report_.SetAllocated(cpu_report, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_report_.IsDefault()) {
    _impl_.cpu_report_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx4.OCRResultInfo.cpu_report)
}

// optional uint64 time_used = 7;
inline bool OCRResultInfo::_internal_has_time_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OCRResultInfo::has_time_used() const {
  return _internal_has_time_used();
}
inline void OCRResultInfo::clear_time_used() {
  _impl_.time_used_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t OCRResultInfo::_internal_time_used() const {
  return _impl_.time_used_;
}
inline uint64_t OCRResultInfo::time_used() const {
  // @@protoc_insertion_point(field_get:wx4.OCRResultInfo.time_used)
  return _internal_time_used();
}
inline void OCRResultInfo::_internal_set_time_used(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_used_ = value;
}
inline void OCRResultInfo::set_time_used(uint64_t value) {
  _internal_set_time_used(value);
  // @@protoc_insertion_point(field_set:wx4.OCRResultInfo.time_used)
}

// -------------------------------------------------------------------

// QRResultInfo

// -------------------------------------------------------------------

// MMFGResultInfo

// -------------------------------------------------------------------

// ParseOCRRespMessage

// optional uint64 task_id = 1;
inline bool ParseOCRRespMessage::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParseOCRRespMessage::has_task_id() const {
  return _internal_has_task_id();
}
inline void ParseOCRRespMessage::clear_task_id() {
  _impl_.task_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ParseOCRRespMessage::_internal_task_id() const {
  return _impl_.task_id_;
}
inline uint64_t ParseOCRRespMessage::task_id() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.task_id)
  return _internal_task_id();
}
inline void ParseOCRRespMessage::_internal_set_task_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.task_id_ = value;
}
inline void ParseOCRRespMessage::set_task_id(uint64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:wx4.ParseOCRRespMessage.task_id)
}

// optional int32 err_code = 2;
inline bool ParseOCRRespMessage::_internal_has_err_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParseOCRRespMessage::has_err_code() const {
  return _internal_has_err_code();
}
inline void ParseOCRRespMessage::clear_err_code() {
  _impl_.err_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ParseOCRRespMessage::_internal_err_code() const {
  return _impl_.err_code_;
}
inline int32_t ParseOCRRespMessage::err_code() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.err_code)
  return _internal_err_code();
}
inline void ParseOCRRespMessage::_internal_set_err_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.err_code_ = value;
}
inline void ParseOCRRespMessage::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:wx4.ParseOCRRespMessage.err_code)
}

// optional .wx4.OCRResultInfo res = 3;
inline bool ParseOCRRespMessage::_internal_has_res() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.res_ != nullptr);
  return value;
}
inline bool ParseOCRRespMessage::has_res() const {
  return _internal_has_res();
}
inline void ParseOCRRespMessage::clear_res() {
  if (_impl_.res_ != nullptr) _impl_.res_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::wx4::OCRResultInfo& ParseOCRRespMessage::_internal_res() const {
  const ::wx4::OCRResultInfo* p = _impl_.res_;
  return p != nullptr ? *p : reinterpret_cast<const ::wx4::OCRResultInfo&>(
      ::wx4::_OCRResultInfo_default_instance_);
}
inline const ::wx4::OCRResultInfo& ParseOCRRespMessage::res() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.res)
  return _internal_res();
}
inline void ParseOCRRespMessage::unsafe_arena_set_allocated_res(
    ::wx4::OCRResultInfo* res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.res_);
  }
  _impl_.res_ = res;
  if (res) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wx4.ParseOCRRespMessage.res)
}
inline ::wx4::OCRResultInfo* ParseOCRRespMessage::release_res() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wx4::OCRResultInfo* temp = _impl_.res_;
  _impl_.res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wx4::OCRResultInfo* ParseOCRRespMessage::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRRespMessage.res)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wx4::OCRResultInfo* temp = _impl_.res_;
  _impl_.res_ = nullptr;
  return temp;
}
inline ::wx4::OCRResultInfo* ParseOCRRespMessage::_internal_mutable_res() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.res_ == nullptr) {
    auto* p = CreateMaybeMessage<::wx4::OCRResultInfo>(GetArenaForAllocation());
    _impl_.res_ = p;
  }
  return _impl_.res_;
}
inline ::wx4::OCRResultInfo* ParseOCRRespMessage::mutable_res() {
  ::wx4::OCRResultInfo* _msg = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRRespMessage.res)
  return _msg;
}
inline void ParseOCRRespMessage::set_allocated_res(::wx4::OCRResultInfo* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.res_ = res;
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRRespMessage.res)
}

// optional .wx4.ReqType rt = 4;
inline bool ParseOCRRespMessage::_internal_has_rt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rt_ != nullptr);
  return value;
}
inline bool ParseOCRRespMessage::has_rt() const {
  return _internal_has_rt();
}
inline void ParseOCRRespMessage::clear_rt() {
  if (_impl_.rt_ != nullptr) _impl_.rt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::wx4::ReqType& ParseOCRRespMessage::_internal_rt() const {
  const ::wx4::ReqType* p = _impl_.rt_;
  return p != nullptr ? *p : reinterpret_cast<const ::wx4::ReqType&>(
      ::wx4::_ReqType_default_instance_);
}
inline const ::wx4::ReqType& ParseOCRRespMessage::rt() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.rt)
  return _internal_rt();
}
inline void ParseOCRRespMessage::unsafe_arena_set_allocated_rt(
    ::wx4::ReqType* rt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rt_);
  }
  _impl_.rt_ = rt;
  if (rt) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wx4.ParseOCRRespMessage.rt)
}
inline ::wx4::ReqType* ParseOCRRespMessage::release_rt() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::wx4::ReqType* temp = _impl_.rt_;
  _impl_.rt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wx4::ReqType* ParseOCRRespMessage::unsafe_arena_release_rt() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRRespMessage.rt)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::wx4::ReqType* temp = _impl_.rt_;
  _impl_.rt_ = nullptr;
  return temp;
}
inline ::wx4::ReqType* ParseOCRRespMessage::_internal_mutable_rt() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::wx4::ReqType>(GetArenaForAllocation());
    _impl_.rt_ = p;
  }
  return _impl_.rt_;
}
inline ::wx4::ReqType* ParseOCRRespMessage::mutable_rt() {
  ::wx4::ReqType* _msg = _internal_mutable_rt();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRRespMessage.rt)
  return _msg;
}
inline void ParseOCRRespMessage::set_allocated_rt(::wx4::ReqType* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rt_;
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rt);
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRRespMessage.rt)
}

// optional bytes qrcode = 5;
inline bool ParseOCRRespMessage::_internal_has_qrcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParseOCRRespMessage::has_qrcode() const {
  return _internal_has_qrcode();
}
inline void ParseOCRRespMessage::clear_qrcode() {
  _impl_.qrcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParseOCRRespMessage::qrcode() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.qrcode)
  return _internal_qrcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParseOCRRespMessage::set_qrcode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.qrcode_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx4.ParseOCRRespMessage.qrcode)
}
inline std::string* ParseOCRRespMessage::mutable_qrcode() {
  std::string* _s = _internal_mutable_qrcode();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRRespMessage.qrcode)
  return _s;
}
inline const std::string& ParseOCRRespMessage::_internal_qrcode() const {
  return _impl_.qrcode_.Get();
}
inline void ParseOCRRespMessage::_internal_set_qrcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.qrcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ParseOCRRespMessage::_internal_mutable_qrcode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.qrcode_.Mutable(GetArenaForAllocation());
}
inline std::string* ParseOCRRespMessage::release_qrcode() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRRespMessage.qrcode)
  if (!_internal_has_qrcode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.qrcode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qrcode_.IsDefault()) {
    _impl_.qrcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParseOCRRespMessage::set_allocated_qrcode(std::string* qrcode) {
  if (qrcode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.qrcode_.SetAllocated(qrcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.qrcode_.IsDefault()) {
    _impl_.qrcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRRespMessage.qrcode)
}

// optional bytes mmfg = 6;
inline bool ParseOCRRespMessage::_internal_has_mmfg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParseOCRRespMessage::has_mmfg() const {
  return _internal_has_mmfg();
}
inline void ParseOCRRespMessage::clear_mmfg() {
  _impl_.mmfg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParseOCRRespMessage::mmfg() const {
  // @@protoc_insertion_point(field_get:wx4.ParseOCRRespMessage.mmfg)
  return _internal_mmfg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParseOCRRespMessage::set_mmfg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mmfg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx4.ParseOCRRespMessage.mmfg)
}
inline std::string* ParseOCRRespMessage::mutable_mmfg() {
  std::string* _s = _internal_mutable_mmfg();
  // @@protoc_insertion_point(field_mutable:wx4.ParseOCRRespMessage.mmfg)
  return _s;
}
inline const std::string& ParseOCRRespMessage::_internal_mmfg() const {
  return _impl_.mmfg_.Get();
}
inline void ParseOCRRespMessage::_internal_set_mmfg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mmfg_.Set(value, GetArenaForAllocation());
}
inline std::string* ParseOCRRespMessage::_internal_mutable_mmfg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mmfg_.Mutable(GetArenaForAllocation());
}
inline std::string* ParseOCRRespMessage::release_mmfg() {
  // @@protoc_insertion_point(field_release:wx4.ParseOCRRespMessage.mmfg)
  if (!_internal_has_mmfg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mmfg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mmfg_.IsDefault()) {
    _impl_.mmfg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParseOCRRespMessage::set_allocated_mmfg(std::string* mmfg) {
  if (mmfg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mmfg_.SetAllocated(mmfg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mmfg_.IsDefault()) {
    _impl_.mmfg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx4.ParseOCRRespMessage.mmfg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wx4

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ocr_5fwx4_2eproto
